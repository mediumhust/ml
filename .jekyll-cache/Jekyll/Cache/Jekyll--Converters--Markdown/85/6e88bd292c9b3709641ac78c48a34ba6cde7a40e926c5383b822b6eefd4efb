I"{<p><strong>Trong trang này:</strong></p>

<!-- MarkdownTOC -->

<ul>
  <li><a href="#-gioi-thieu">1. Giới thiệu</a>
    <ul>
      <li><a href="#-pla-cho-cac-ham-logic-co-ban">1.1. PLA cho các hàm logic cơ bản</a></li>
      <li><a href="#-bieu-dien-ham-xor-voi-neural-network">1.2. Biểu diễn hàm XOR với Neural Network.</a></li>
    </ul>
  </li>
  <li><a href="#-cac-ky-hieu-va-khai-niem">2. Các ký hiệu và khái niệm</a>
    <ul>
      <li><a href="#-layers">2.1. Layers</a></li>
      <li><a href="#-units">2.2. Units</a></li>
      <li><a href="#-weights-va-biases">2.3. Weights và Biases</a></li>
      <li><a href="#-activation-functions">2.4. Activation functions</a>
        <ul>
          <li><a href="#-ham-sgn-khong-duoc-su-dung-trong-mlp">2.4.1. Hàm <em>sgn</em> không được sử dụng trong MLP</a></li>
          <li><a href="#-sigmoid-va-tanh">2.4.1 Sigmoid và tanh</a></li>
          <li><a href="#-relu">2.4.3. ReLU</a></li>
          <li><a href="#-mot-vai-luu-y">2.4.4. Một vài lưu ý</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#-backpropagation">3. Backpropagation</a>
    <ul>
      <li><a href="#-backpropagation-cho-stochastic-gradient-descent">3.1. Backpropagation cho Stochastic Gradient Descent</a>
        <ul>
          <li><a href="#-dao-ham-theo-tung-he-so-\\wij^l-bi^l\\">3.1.1. Đạo hàm theo từng hệ số \newline(w_{ij}^{(l)}, b_{i}^{(l)}\newline)</a></li>
          <li><a href="#-dao-ham-theo-ma-tran-\newlinemathbfw^l-\mathbfb^l\\">3.1.2. Đạo hàm theo ma trận \newline(\mathbf{W}^{(l)}, \mathbf{b}^{(l)}\newline)</a></li>
        </ul>
      </li>
      <li><a href="#-backpropagation-cho-batch-mini-batch-gradient-descent">3.2. Backpropagation cho Batch (mini-batch) Gradient Descent</a></li>
    </ul>
  </li>
  <li><a href="#-vi-du-tren-python">4. Ví dụ trên Python</a>
    <ul>
      <li><a href="#-tao-du-lieu-gia">4.1. Tạo dữ liệu giả</a></li>
      <li><a href="#-tinh-toan-feedforward">4.2. Tính toán Feedforward</a></li>
      <li><a href="#-tinh-toan-backpropagation">4.3. Tính toán Backpropagation</a></li>
      <li><a href="#-mot-so-ham-phu-tro">4.4. Một số hàm phụ trợ</a></li>
      <li><a href="#-phan-chuong-trinh-chinh">4.4. Phần chương trình chính</a></li>
      <li><a href="#-ket-qua">4.5. Kết quả</a></li>
    </ul>
  </li>
  <li><a href="#-thao-luan">5. Thảo luận</a></li>
  <li><a href="#-tai-lieu-tham-khao">6. Tài liệu tham khảo</a></li>
</ul>

<!-- /MarkdownTOC -->

<p>Vì bài này sử dụng khá nhiều công thức toán, bạn đọc được khuyến khích đọc <a href="/math/#luu-y-ve-ky-hieu">Lưu ý về ký hiệu toán học</a>.</p>

<p><a name="-gioi-thieu"></a></p>

<h2 id="1-giới-thiệu">1. Giới thiệu</h2>

<p>Bài toán <a href="/2016/12/27/categories/#supervised-learning-hoc-co-giam-sat">Supervised Learning</a>, nói một cách ngắn gọn, là việc đi tìm một hàm số để với mỗi <em>input</em>, ta sử dụng hàm số đó để dự đoán <em>output</em>. Hàm số này được xây dựng dựa trên các cặp dữ liệu \((\mathbf{x}
_i, \mathbf{y}_i)\) trong <em>training set</em>. Nếu <em>đầu ra dự đoán</em> (predicted output) gần với <em>đầu ra thực sự</em> (<a href="/2017/01/08/knn/#ground-truth">ground truth</a>) thì đó được gọi là một thuật toán tốt (nhưng khi <em>đầu ra dự đoán quá giống với đầu ra thực sự</em> thì không hẳn đã tốt, tôi sẽ đề cập kỹ về hiện tượng trong bài tiếp theo).</p>

<p><a name="-pla-cho-cac-ham-logic-co-ban"></a></p>

<h3 id="11-pla-cho-các-hàm-logic-cơ-bản">1.1. PLA cho các hàm logic cơ bản</h3>

<p>Chúng ta cùng xét khả năng biểu diễn (representation) của <a href="/2017/01/21/perceptron/">Perceptron Learning Algorithm (PLA)</a> cho các bài toán binary vô cùng đơn giản: biểu diễn các hàm số logic NOT, AND, OR, và <a href="https://en.wikipedia.org/wiki/Exclusive_or">XOR</a> (output bằng 1 nếu và chỉ nếu hai input khác nhau). Để có thể sử dụng PLA (output là 1 hoặc -1), chúng ta sẽ thay các giá trị bằng 0 của output của các hàm này bởi -1. Trong hàng trên của Hình 1 dưới đây, các điểm hình vuông màu xanh là các điểm có label bằng 1, các điểm hình tròn màu đỏ là các điểm có label bằng -1. Hàng dưới của Hình 1 là các mô hình perceptron với các hệ số tương ứng.</p>

<hr />

<div class="imgcap">
 <img src="/assets/14_mlp/logic_nn.png" align="center" width="800" />
 <div class="thecap"> Hình 1: PLA biểu diễn các hàm logic đơn giản. </div>
</div>
<hr />

<p>Nhận thấy rằng với các bài toán OR, AND, và OR, dữ liệu là <a href="/2017/01/21/perceptron/#bai-toan-perceptron"><em>linearly separable</em></a>, vì vậy ta có thể tìm được các hệ số cho perceptron giúp biểu diễn chính xác mỗi hàm số. Xem ví dụ với hàm NOT, khi \(x_1 = 0\), ta có \(a = \text{sgn}(-2 \times 0+1) = 1\). Khi \(x_1 = 1\), \(a = \text{sgn}(-2\times 1 + 1) = -1\). Trong cả hai trường hợp, predicted output đều giống với <a href="/2017/01/08/knn/#ground-truth">ground truth</a>. Bạn đọc có thể tự kiểm chứng các hệ số trong hình với hàm AND và OR.</p>

<p><a name="-bieu-dien-ham-xor-voi-neural-network"></a></p>

<h3 id="12-biểu-diễn-hàm-xor-với-neural-network">1.2. Biểu diễn hàm XOR với Neural Network.</h3>

<p>Với hàm XOR, vì dữ liệu không <em>linearly separable</em>, tức không thể tìm được 1 đường thằng giúp phân chia hai lớp xanh đỏ, nên bài toán vô nghiệm. Nếu thay PLA bằng <a href="/2017/01/27/logisticregression/">Logistic Regression</a>, tức thay hàm activation function từ <em>sgn</em> sang <a href="/2017/01/27/logisticregression/#sigmoid-function"><em>sigmoid</em></a>, ta cũng không tìm được các hệ số thỏa mãn, vì về bản chất, <a href="/2017/01/27/logisticregression/#boundary-tao-boi-logistic-regression-co-dang-tuyen-tinh">Logistic Regression cũng chỉ tạo ra các đường biên có dạng tuyến tính</a>. Như vậy là các mô hình Neural Network chúng ta đã biết không thể biểu diễn được hàm số logic đơn giản này.</p>

<p>Nhận thấy rằng nếu cho phép sử dụng hai đường thẳng, bài toán biểu diễn hàm XOR sẽ được giải quyết như Hình 2 (trái) dưới đây:</p>

<hr />

<div class="imgcap">
 <img src="/assets/14_mlp/xor_nn.png" align="center" width="800" />
 <div class="thecap">Hình 2: Multilayer Perceptron biểu diễn hàm XOR</div>
</div>
<hr />

<p>Các hệ số tương ứng với hai đường thẳng trong Hình 2 (trái) được minh họa trên Hình 2 (phải) tại các node màu xanh (có hai loại màu xanh). Đầu ra \(a_1^{(1)}\) bằng 1 với các điểm nằm về phía (+) của đường thẳng \(-2x_1 -2x_2 +3 = 0\), bằng -1 với các điểm nằm về phía (-) của đường thẳng này. Tương tự, đầu ra \(a_2^{(1)}\) bằng 1 với các điểm nằm về phía (+) của đường thẳng \(2x_1 + 2x_2 - 1 = 0\). Như vậy, hai đường thằng này tạo ra hai <em>đầu ra</em> tại các node \(a_1^{(1)}, a_2^{(1)}\). Vì hàm XOR chỉ có một đầu ra nên ta cần làm thêm một bước nữa: coi \(a_1, a_2\) như là input của một PLA khác. Trong PLA mới này, input là các node màu lam (đừng quên node bias có giá trị bằng 1), output là các node màu đỏ. Các hệ số được cho trên Hình 2 (phải). Kiểm tra lại một chút, với các điểm hình vuông xanh (hình trái), \(a^{(1)}_1 = a^{(1)}_2 = 1\), khi đó \(a^{(2)} = \text{sgn}(1 + 1 - 1) = 1\). Với các điểm hình tròn đỏ, \(a^{(1)}_1 = -a^{(1)}_2\), vậy nên \(a^{(2)} = \text{sgn}(a^{(1)}_1 + a^{(1)}_2 - 1) = \text{sgn}(-1) = -1\). Trong cả hai trường hợp, predicted ouput đều giống với ground truth. Vậy, nếu ta sử dụng 3 PLA tương ứng với các output \(a^{(1)}_1, a^{(1)}_2, a^{(2)}\), ta sẽ biểu diễn được hàm XOR.</p>

<p>Ba PLA kể trên được xếp vào hai <em>layers</em>. Layer thứ nhất: input - lục, output - lam. Layer thứ hai: input - lam, output - đỏ. Ở đây, output của layer thứ nhất chính là input của layer thứ hai. Tổng hợp lại ta được một mô hình mà ngoài layer input (lục) và output (đỏ), ta còn có một layer nữa (lam). Mô hình này có tên gọi là Multi-layer Perceptron (MLP). Layer trung gian ở giữa còn được gọi là <em>hidden layer</em>.</p>

<p><strong>Một vài lưu ý:</strong></p>

<ul>
  <li>
    <p>Perceptron Learing Algorithm là một trường hợp của <em>single-layer neural network</em> với <a href="/2017/01/27/logisticregression/#nhac-lai-hai-mo-hinh-tuyen-tinh"><em>activation fucntion</em></a> là hàm <em>sgn</em>. Trong khi đó, Perceptron là tên chung để chỉ các Neural Network với chỉ một input layer và một output tại output layer, không có hidden layer.</p>
  </li>
  <li>
    <p>Các <em>activation function</em> có thể là các nonlinear function khác, ví dụ như <a href="/2017/01/27/logisticregression/#sigmoid-function"><em>sigmoid function</em></a> hoặc <a href="/2017/01/27/logisticregression/#tanh-function"><em>tanh function</em></a>. Các <em>activation function</em> phải là nonlinear (phi tuyến), vì nếu không, nhiều layer hay một layer cũng là như nhau. Ví dụ với hai layer trong Hình 2, nếu <em>activation function</em> là một hàm linear (giả sử hàm \(f(s) = s\)), thì cả hai layer có thể được thay bằng một layer với ma trận hệ số \(\mathbf{W} = \mathbf{W}^{(1)}\mathbf{W}^{(2)}\) (tạm bỏ qua biases).</p>
  </li>
  <li>
    <p>Để cho đơn giản, tôi đã sử dụng ký hiệu \(\mathbf{W}^{(l)T}\) để thay cho \((\mathbf{W}^{(l)})^T\) (ma trận chuyển vị). Trong Hình 2 (phải), tôi sử dụng ký hiệu ma trận \(\mathbf{W}^{(2)}\), mặc dù đúng ra nó phải là vector, để biểu diễn tổng quát cho trường hợp output layer có thể có nhiều hơn 1 node. Tương tự với bias \(\mathbf{b}^{(2)}\).</p>
  </li>
  <li>
    <p>Khác với các bài trước về Neural Networks, khi làm việc với MLP, ta nên tách riêng phần biases và ma trận hệ số ra. Điều này đồng nghĩa với việc vector input \(\mathbf{x}\) là vector KHÔNG mở rộng.</p>
  </li>
</ul>

<p><a name="-cac-ky-hieu-va-khai-niem"></a></p>

<h2 id="2-các-ký-hiệu-và-khái-niệm">2. Các ký hiệu và khái niệm</h2>

<p><a name="-layers"></a></p>

<h3 id="21-layers">2.1. Layers</h3>
<p>Ngoài <em>Input layers</em> và <em>Output layers</em>, một Multi-layer Perceptron (MLP) có thể có nhiều <em>Hidden layers</em> ở giữa. Các <em>Hidden layers</em> theo thứ tự từ input layer đến output layer được đánh số thứ thự là <em>Hidden layer 1</em>, <em>Hidden layer 2</em>, … Hình 3 dưới đây là một ví dụ với 2 Hidden layers.</p>

<hr />

<div class="imgcap">
 <img src="/assets/14_mlp/multi_layers.png" align="center" width="400" />
 <div class="thecap">Hình 3: MLP với hai hidden layers (các biases đã bị ẩn).</div>
</div>
<hr />

<p>Số lượng layer trong một MLP được tính bằng số hidden layers cộng với 1. Tức là khi đếm số layers của một MLP, ta không tính input layers. Số lượng layer trong một MLP thường được ký hiệu là \(L\). Trong Hình 3 trên đây, \(L = 3\).</p>

<p><a name="-units"></a></p>

<h3 id="22-units">2.2. Units</h3>
<p>Một <em>node</em> hình tròn trong một layer được gọi là một unit. Unit ở các input layer, hidden layers, và output layer được lần lượt gọi là input unit, hidden unit, và output unit. Đầu vào của các hidden layer được ký hiệu bởi \(z\), đầu ra của mỗi unit thường được ký hiệu là \(a\) (thể hiện <em>activation</em>, tức giá trị của mỗi unit sau khi ta áp dụng activation function lên \(z\)). Đầu ra của unit thứ \(i\) trong layer thứ \(l\) được ký hiệu là \(a_i^{(l)}\). Giả sử thêm rằng số unit trong layer thứ \(l)\) (không tính bias) là \(d^{(l)}\). Vector biểu diễn output của layer thứ \(l\) được ký hiệu là \(\mathbf{a}^{(l)} \in \mathbb{R}^{d^{(l)}}\).</p>

<p><em>Khi làm việc với những Neural Networks phức tạp, cách tốt nhất để hạn chế lỗi là viết cụ thể chiều của mỗi ma trận hay vector ra, bạn sẽ thấy rõ hơn trong phần sau.</em></p>

<hr />

<div class="imgcap">
 <img src="/assets/14_mlp/mlp_notation.png" align="center" width="600" />
 <div class="thecap">Hình 4: Các ký hiệu sử dụng trong MLP.</div>
</div>
<hr />

<p><a name="-weights-va-biases"></a></p>

<h3 id="23-weights-và-biases">2.3. Weights và Biases</h3>
<p>Có \(L\) ma trận trọng số cho một MLP có \(L\) layers. Các ma trận này được ký hiệu là \(\mathbf{W}^{(l)} \in \mathbb{R}^{d^{(l-1)}\times d^{(l)}}, l = 1, 2, \dots, L\) trong đó \(\mathbf{W}^{(l)}\) thể hiện các <em>kết nối</em> từ layer thứ \(l-1\) tới layer thứ \(l\) (nếu ta coi input layer là layer thứ \(0\)). Cụ thể hơn, phần tử \(w^{(l)}_{ij}\) thể hiện kết nối từ node thứ \(i\) của layer thứ \((l-1)\) tới node từ \(j\) của layer thứ \((l)\). Các biases của layer thứ \((l)\) được ký hiệu là \(\mathbf{b}^{(l)} \in \mathbb{R}^{d^{(l)}}\). Các trọng số này được ký hiệu như trên Hình 4. Khi tối ưu một MLP cho một công việc nào đó, chúng ta cần đi tìm các weghts và biases này.</p>

<p>Tập hợp các weights và biases lần lượt được ký hiệu là \(\mathbf{W}\) và \(\mathbf{b}\).</p>

<p><a name="-activation-functions"></a></p>

<h3 id="24-activation-functions">2.4. Activation functions</h3>
<p>(Phần này chú yếu được dịch lại từ: <a href="CS231n Convolutional Neural Networks for Visual Recognition">http://cs231n.github.io/neural-networks-1/ </a>)</p>

<p>Mỗi output của một unit (trừ các input units) được tính dựa vào công thức:
\[
a_i^{(l)} = f(\mathbf{w}_i^{(l)T}\mathbf{a}^{(l-1)} + b_i^{(l)})
\]</p>

<p>Trong đó \(f(.)\) là một (nonlinear) activation function. Ở dạng vector, biểu thức bên trên được viết là:</p>

<p>\[
\mathbf{a}^{(l)} = f(\mathbf{W}^{(l)T}\mathbf{a}^{(l-1)} + \mathbf{b}^{(l)})
\]</p>

<p>Khi activation function \(f(.)\) được áp dụng cho một ma trận (hoặc vector), ta hiểu rằng nó được áp dụng cho <em>từng thành phần của ma trận đó</em>. Sau đó các thành phần này được sắp xếp lại đúng theo thứ tự để được một ma trận có kích thước bằng với ma trận input. Trong tiếng Anh, việc áp dụng lên từng phần tử như thế này được gọi là <em>element-wise</em>.</p>

<p><a name="-ham-sgn-khong-duoc-su-dung-trong-mlp"></a></p>

<h4 id="241-hàm-sgn-không-được-sử-dụng-trong-mlp">2.4.1. Hàm <em>sgn</em> không được sử dụng trong MLP</h4>

<p>Hàm <em>sgn</em> (còn gọi là <em>hard-threshold</em>) chỉ được sử dụng trong PLA, mang mục đích giáo dục nhiều hơn. Trong thực tế, hàm <em>sgn</em> không được sử dụng vì hai lý do: đầu ra là <em>discrete</em>, và đạo hàm tại hầu hết các điểm bằng 0 (trừ điểm 0 không có đạo hàm). Việc đạo hàm bằng 0 này khiến cho các thuật toán gradient-based (ví dụ như <a href="/2017/01/12/gradientdescent/_">Gradient Descent</a>) không hoạt động!</p>

<p><a name="-sigmoid-va-tanh"></a></p>

<h4 id="241-sigmoid-và-tanh">2.4.1 Sigmoid và tanh</h4>
<hr />

<div>
<table width="100%" style="border: 0px solid white">
   <tr>
        <td width="40%" style="border: 0px solid white">
        <img style="display:block;" width="100%" src="/assets/14_mlp/sigmoid.jpeg" />
         </td>
        <td width="40%" style="border: 0px solid white">
        <img style="display:block;" width="100%" src="/assets/14_mlp/tanh.jpeg" />
        </td>

    </tr>
</table>
<div class="thecap"> Hình 5: Hàm <i>sigmoid</i> (trái) và <em>tanh</em> (phải). (Nguồn <a href="http://cs231n.github.io/neural-networks-1/">CS231n Convolutional Neural Networks for Visual Recognition</a>)
</div>
</div>
<hr />

<p>Hàm <em>sigmoid</em> có dạng \(f(s) = 1/(1 + \exp(-s))\) với đồ thị như trong Hình 5 (trái). Nếu đầu vào lớn, hàm số sẽ cho đầu ra gần với 1. Với đầu vào nhỏ (rất âm), hàm số sẽ cho đầu ra gần với 0. Hàm số này được sử dụng nhiều trong quá khứ ví có đạo hàm rất <em>đẹp</em>. Những năm gần đây, hàm số này ít khi được sử dụng. Nó có một nhược điểm cơ bản:</p>

<ul>
  <li><em>Sigmoid saturate and kill gradients</em>: Một nhược điểm dễ nhận thấy là khi đầu vào có trị tuyệt đối lớn (rất âm hoặc rất dương), gradient của hàm số này sẽ rất gần với 0. Điều này đồng nghĩa với việc các hệ số tương ứng với unit đang xét sẽ gần như không được cập nhật. Bạn đọc sẽ hiểu rõ hơn phần này trong phần <a href="#-backpropagation">Backpropagation</a>.</li>
</ul>

<p>Hàm <em>tanh</em> cũng có nhược điểm tương tự về việc gradient rất nhỏ với các đầu vào có trị tuyệt đối lớn.</p>

<p><a name="-relu"></a></p>

<h4 id="243-relu">2.4.3. ReLU</h4>

<hr />

<div>
<table width="100%" style="border: 0px solid white">
   <tr>
        <td width="40%" style="border: 0px solid white">
        <img style="display:block;" width="100%" src="/assets/14_mlp/relu.jpeg" />
         </td>
        <td width="40%" style="border: 0px solid white">
        <img style="display:block;" width="100%" src="/assets/14_mlp/alexplot.jpeg" />
        </td>

    </tr>
</table>
 <div class="thecap">Hình 5: Hàm ReLU và tốc độ hội tụ khi so sánh với hàm tanh.</div>
</div>
<hr />

<p>ReLU (Rectified Linear Unit) được sử dụng rộng rãi gần đây vì tính đơn giản của nó. Đồ thị của hàm ReLU được minh họa trên Hình 5 (trái)). Nó có công thức toán học \(f(s) = \max(0, s)\) - rất đơn giản. Ưu điểm chính của nó là:</p>

<ul>
  <li>
    <p>ReLU được chứng minh giúp cho việc training các <em>Deep Networks</em> nhanh hơn rất nhiều (theo <a href="http://www.cs.toronto.edu/~fritz/absps/imagenet.pdf">Krizhevsky et al.</a>). Hình 5 (phải) so sánh sự hội tụ của SGD khi sử dụng hai activation function khác nhau: ReLU và tanh. Sự tăng tốc này được cho là vì ReLU được tính toán gần như tức thời và gradient của nó cũng được tính cực nhanh với gradient bằng 1 nếu đầu vào lớn hơn 0, bằng 0 nếu đầu vào nhỏ hơn 0.</p>
  </li>
  <li>
    <p>Mặc dù hàm ReLU không có đạo hàm tại \(s = 0\), trong thực nghiệm, người ta vẫn thường định nghĩa \(\text{ReLU}’(0) = 0\) và khẳng định thêm rằng, xác suất để input của một unit bằng 0 là rất nhỏ.</p>
  </li>
</ul>

<p>Hàm ReLU có nhiều biến thể khác như <a href="https://en.wikipedia.org/wiki/Rectifier_(neural_networks)">Noisy ReLU, Leaky ReLu, ELUs</a>. Tôi xin phép dừng phần này ở đây vì chưa có ý định đi sâu vào Deep Neural Networks.</p>

<p><a name="-mot-vai-luu-y"></a></p>

<h4 id="244-một-vài-lưu-ý">2.4.4. Một vài lưu ý</h4>

<ul>
  <li>
    <p>Output layer nhiều khi không có activation function mà sử dụng trực tiếp giá trị đầu vào \(z_i^{(l)}\) của mỗi unit. Hoặc nói một cách khác, activation function chính là hàm <em>identity</em>, tức đầu ra bằng đầu vào. Với các bài toán classification, output layer thường là một <a href="/2017/02/17/softmax/">Softmax Regression</a> layer giúp tính xác suất để một điểm dữ liệu rơi vào mỗi class.</p>
  </li>
  <li>
    <p>Mặc dù activation function cho mỗi unit có thể khác nhau, trong cùng một network, activation như nhau thường được sử dụng. Điều này giúp cho việc tính toán được đơn giản hơn.</p>
  </li>
</ul>

<p><a name="-backpropagation"></a></p>

<h2 id="3-backpropagation">3. Backpropagation</h2>
<p><em>Phần này khá nặng về Đại Số Tuyến Tính, bạn đọc không muốn hiểu backpropagation có thể bỏ qua để đọc tiếp phần <a href="#-vi-du-tren-python">Ví dụ với Python</a>.</em></p>

<p>Phương pháp phổ biến nhất để tối ưu MLP vẫn là Gradient Descent (GD). Để áp dụng GD, chúng ta cần tính được gradient của hàm mất mát theo từng ma trận trọng số \(\mathbf{W}^{(l)}\) và vector bias \(\mathbf{b}^{(l)}\). Trước hết, chúng ta cần tính <em>predicted output</em> \( \mathbf{\hat{y}}\)  với một input \(\mathbf{x}\):
\[
\begin{eqnarray}
\mathbf{a}^{(0)} &amp;=&amp; \mathbf{x} \newline
z_{i}^{(l)} &amp;=&amp; \mathbf{w}_i^{(l)T}\mathbf{a}^{(l-1)} + b_i^{(l)} \newline
\mathbf{z}^{(l)}  &amp;=&amp; \mathbf{W}^{(l)T}\mathbf{a}^{(l-1)} + \mathbf{b}^{(l)},~~ l =  1, 2, \dots, L \newline
\mathbf{a}^{(l)} &amp;=&amp; f(\mathbf{z}^{(l)}), ~~ l =  1, 2, \dots, L \newline
\mathbf{\hat{y}} &amp;=&amp; \mathbf{a}^{(L)}
\end{eqnarray}
\]</p>

<p>Bước này được gói là <em>feedforward</em> vì cách tính toán được thực hiện từ đầu đến cuối của network. MLP cũng được gọi</p>

<p>Giả sử \(J(\mathbf{W, b, X, Y})\) là một hàm mất mát của bài toán, trong đó \(\mathbf{W, b}\) là tập hợp tất cả các ma trận trọng số giữa các layers và biases của mỗi layer. \(\mathbf{X, Y}\) là cặp dữ liệu huấn luyện với mỗi cột tương ứng với một điểm dữ liệu. Để có thể áp dụng các gradient-based methods (mà Gradient Descent là một ví dụ), chúng ta cần tính được:
\[
\frac{\partial J}{\partial \mathbf{W}^{(l)}} ; \frac{\partial J}{\partial \mathbf{b}^{(l)}},~~ l = 1, 2, \dots, L
\]</p>

<p>Một ví dụ của hàm mất mát là hàm Mean Square Error (MSE) tức <em>trung bình của bình phương lỗi</em>.
\[
\begin{eqnarray}
J(\mathbf{W, b, X, Y}) &amp;=&amp; \frac{1}{N}\sum_{n=1}^N || \mathbf{y}_n - \mathbf{\hat{y}}_n||_2^2 \newline
&amp;=&amp;\frac{1}{N}\sum_{n=1}^N || \mathbf{y}_n - \mathbf{a}_n^{(L)}||_2^2
\end{eqnarray}
\]
Với \(N\) là số cặp dữ liệu \((\mathbf{x}, \mathbf{y})\) trong tập training.</p>

<p>Theo những công thức ở trên, việc tính toán trực tiếp giá trị này là cực kỳ phức tạp vì hàm mất mát không phụ thuộc trực tiếp vào các hệ số. Phương pháp phổ biến nhất được dùng có tên là Backpropagation giúp tính gradient ngược từ layer cuối cùng đến layer đầu tiên. Layer cuối cùng được tính toán trước vì nó <em>gần gũi</em> hơn với <em>predicted outputs</em> và hàm mất mát. Việc tính toán gradient của các layer trước được thực hiện dựa trên một quy tắc quen thuộc có tên là <a href="https://en.wikipedia.org/wiki/Chain_rule"><em>chain rule</em></a>, tức <em>đạo hàm của hàm hợp</em>.</p>

<p>Stochastic Gradient Descent có thể được sử dụng để tính gradient cho các ma trận trọng số và biases dựa trên một cặp điểm training \(\mathbf{x, y}\). Để cho đơn giản, ta coi \(J\) là hàm mất mát nếu chỉ xét cặp điểm này, ở đây \(J\) là hàm mất mát bất kỳ, không chỉ hàm MSE như ở trên.</p>

<p>Đạo hàm của hàm mất mát theo <em>chỉ một thành phần</em> của ma trận trọng số của lớp cuối cùng:</p>

<p>\[
\begin{eqnarray}
\frac{\partial J}{\partial w_{ij}^{(L)}} &amp;=&amp; \frac{\partial J}{\partial z_j^{(L)}}. \frac{\partial z_j^{(L)}}{\partial w_{ij}^{(L)}} \newline
&amp;=&amp; e_j^{(L)} a_i^{(L-1)}
\end{eqnarray}
\]</p>

<p>Trong đó \(e_j^{(L)} = \frac{\partial J}{\partial z_j^{(L)}} \) thường là một đại lượng <em>dễ tính toán</em> và \(\frac{\partial z_j^{(L)}}{\partial w_{ij}^{(L)}}  = a_i^{(L-1)}\) vì \(z_j^{(L)} = \mathbf{w}_j^{(L)T}\mathbf{a}^{(L-1)} + b_j^{(L)}\).</p>

<p>Tương tự như thế, đạo hàm của hàm mất mát theo bias của layer cuối cùng là:
\[
\frac{\partial J}{\partial b_{j}^{(L)}} = \frac{\partial J}{\partial z_j^{(L)}}. \frac{\partial z_j^{(L)}}{\partial b_{j}^{(L)}} = e_j^{(L)}
\]</p>

<p>Với đạo hàm theo hệ số ở các lớp \(l\) <em>thấp hơn</em>, chúng ta hay xem hình dưới đây. Ở đây, tại mỗi unit, tôi đã viết riêng đầu vào \(z\) và đầu ra \(a\) để các bạn tiện theo dõi.</p>
<hr />

<div class="imgcap">
 <img src="/assets/14_mlp/backpropagation.png" align="center" width="800" />
 <div class="thecap">Hình 6: Mô phỏng cách tính backpropagation. Layer cuối có thể là output layer.</div>
</div>
<hr />

<p>Dựa vào hính trên, ta có thể tính được:</p>

<p>\[
\begin{eqnarray}
\frac{\partial J}{\partial w_{ij}^{(l)}} &amp;=&amp; \frac{\partial J}{\partial z_j^{(l)}}. \frac{\partial z_j^{(l)}}{\partial w_{ij}^{(l)}} \newline
&amp;=&amp; e_j^{(l)} a_i^{(l-1)}
\end{eqnarray}
\]
với:</p>

<p>\[
\begin{eqnarray}
e_j^{(l)} &amp;=&amp; \frac{\partial J}{\partial z_j^{(l)}} = \frac{\partial J}{\partial a_j^{(l)}} . \frac{\partial a_j^{(l)}}{\partial z_j^{(l)}} \newline
&amp;=&amp; \left( \sum_{k = 1}^{d^{(l+1)}} \frac{\partial J}{\partial z_k^{(l+1)}} .\frac{\partial z_k^{(l+1)}}{\partial a_j^{(l)}} \right) f’(z_j^{(l)}) \newline
 &amp;=&amp;\left( \sum_{k = 1}^{d^{(l+1)}} e_k^{(l+1)} w_{jk}^{(l+1)} \right) f’(z_j^{(l)}) \newline
 &amp;=&amp;\left( \mathbf{w}_{j:}^{(l+1)} \mathbf{e}^{(l+1)} \right) f’(z_j^{(l)}) \newline
\end{eqnarray}
\]</p>

<p>trong đó \(\mathbf{e}^{(l+1)} = [e_1^{(l+1)}, e_2^{(l+1)}, …, e_{d^{(l+1)}}^{(l+1)}]^T \in \mathbb{R}^{d^{(l+1)}\times 1} \) và \(\mathbf{w}_{j:}^{(l+1)}\) được hiểu là <strong>hàng</strong> thứ \(j\) của ma trận \(\mathbf{W}^{(l+1)}\) (Chú ý dấu hai chấm, khi không có dấu này, tôi mặc định ký hiệu nó cho vector <em>cột</em>).</p>

<p>Dấu sigma tính tổng ở hàng thứ hai trong phép tính trên xuất hiện vì \(a_{j}^{(l)}\) <em>đóng góp</em> vào việc tính tất cả các \(z_k^{(l+1)}, k = 1, 2, \dots, d^{(l+1)}\). Biểu thức đạo hàm ngoài dấu ngoặc lớn là vì \(a_j^{(l)}  = f(z_j^{(l)})\). Tới đây, ta có thể thấy rằng việc activation function có đạo hàm đơn giản sẽ có ích rất nhiều trong việc tính toán.</p>

<p>Với cách làm tương tự, bạn đọc có thể suy ra:
\[
\frac{\partial J}{\partial b_j^{(l)}} = e_j^{(l)}
\]</p>

<p>Nhận thấy rằng trong các công thức trên đây, việc tính các \(e_j^{(l)}\) đóng một vài trò quan trọng. Hơn nữa, để tính được giá trị này, ta cần tính được các \(e_j^{(l+1)}\). Nói cách khác, ta cần tính <em>ngược</em> các giá trị này từ cuối. Cái tên <em>backpropagation</em> cũng xuất phát từ việc này.</p>

<p>Việc tính toán các đạo hàm khi sử dụng SGD có thể tóm tắt như sau:</p>

<p><a name="-backpropagation-cho-stochastic-gradient-descent"></a></p>

<h3 id="31-backpropagation-cho-stochastic-gradient-descent">3.1. Backpropagation cho Stochastic Gradient Descent</h3>

<p><a name="-dao-ham-theo-tung-he-so-\\wij^l-bi^l\\"></a></p>

<h4 id="311-đạo-hàm-theo-từng-hệ-số-w_ijl-b_il">3.1.1. Đạo hàm theo từng hệ số \(w_{ij}^{(l)}, b_{i}^{(l)}\)</h4>
<hr />

<ol>
  <li>Bước feedforward: Với 1 giá trị đầu vào \(\mathbf{x}\), tính giá trị đầu ra của network, trong quá trình tính toán, lưu lại các <em>activation</em> \(\mathbf{a}^{(l)}\) tại mỗi layer.</li>
  <li>Với mỗi unit \(j\) ở output layer, tính \[e_j^{(L)} = \frac{\partial J}{\partial z_j^{(L)}}\]</li>
  <li>Từ đó suy ra:
\[
\begin{eqnarray}
\frac{\partial J}{\partial w_{ij}^{(L)}} &amp;=&amp; a_i^{(L-1)}e_j^{(L)} \newline
\frac{\partial J}{\partial b_{j}^{(L)}} &amp;=&amp; e_j^{(L)}
\end{eqnarray}
\]</li>
  <li>Với \(l = L-1, L-2, …, 1\), tính:
\[
e_j^{(l)} = \left( \mathbf{w}_{j:}^{(l+1)} \mathbf{e}^{(l+1)} \right) f’(z_j^{(l)})
\]</li>
  <li>Cập nhật đạo hàm cho từng hệ số:
\[
\begin{eqnarray}
\frac{\partial J}{\partial w_{ij}^{(l)}} &amp;=&amp; a_i^{(l-1)} e_j^{(l)} \newline
\frac{\partial J}{\partial b_{j}^{(l)}} &amp;=&amp; e_j^{(l)}
\end{eqnarray}
\]</li>
</ol>

<hr />

<p><a name="-dao-ham-theo-ma-tran-\newlinemathbfw^l-\mathbfb^l\\"></a></p>

<h4 id="312-đạo-hàm-theo-ma-trận-mathbfwl-mathbfbl">3.1.2. Đạo hàm theo ma trận \(\mathbf{W}^{(l)}, \mathbf{b}^{(l)}\)</h4>
<p>Việc tính toán theo từng hệ số như trên chỉ phù hợp cho việc hiểu nguyên lý tính toán, trong khi lập trình, ta cần tìm cách thu gọn chúng về dạng vector và ma trận để tăng tốc độ cho thuật toán. Đặt \(\mathbf{e}^{(l)} = [e_1^{(l)}, e_2^{(l)}, …, e_{d^{(l)}}^{(l)}]^T \in \mathbb{R}^{d^{(l)}\times 1} \). Ta sẽ có quy tắc tính như sau:</p>

<hr />

<ol>
  <li>Bước feedforward: Với 1 giá trị đầu vào \(\mathbf{x}\), tính giá trị đầu ra của network, trong quá trình tính toán, lưu lại các <em>activation</em> \(\mathbf{a}^{(l)}\) tại mỗi layer.</li>
  <li>Với output layer, tính: \[\mathbf{e}^{(L)} = \frac{\partial J}{\partial \mathbf{z}^{(L)}}\]</li>
  <li>Từ đó suy ra:
\[
\begin{eqnarray}
\frac{\partial J}{\partial \mathbf{W}^{(L)}} &amp;=&amp; \mathbf{a}^{(L-1)}\mathbf{e}^{(L)T}\newline
\frac{\partial J}{\partial \mathbf{b}^{(L)}} &amp;=&amp;  \mathbf{e}^{(L)}
\end{eqnarray}
\]</li>
  <li>Với \(l = L-1, L-2, …, 1\), tính:
\[
\mathbf{e}^{(l)} = \left( \mathbf{W}^{(l+1)} \mathbf{e}^{(l+1)} \right) \odot f’(\mathbf{z}^{(l)})
\]
trong đó \(\odot\) là <em>element-wise product</em> hay <em>Hadamard product</em> tức lấy từng thành phần của hai vector nhân với nhau để được vector kết quả.</li>
  <li>Cập nhật đạo hàm cho ma trận trọng số và vector biases:
\[
\begin{eqnarray}
\frac{\partial J}{\partial \mathbf{W}^{(l)}} &amp;=&amp; \mathbf{a}^{(l-1)}\mathbf{e}^{(l)T}\newline
\frac{\partial J}{\partial \mathbf{b}^{(l)}} &amp;=&amp; \mathbf{e}^{(l)}
\end{eqnarray}
\]</li>
</ol>

<hr />

<p><strong>Chú ý:</strong> Biểu thức tính đạo hàm trong dòng trên của bước 3 có thể khiến bạn đặt câu hỏi: tại sao lại là \(\mathbf{a}^{(L-1)}\mathbf{e}^{(L)T}\) mà không phải là \(\mathbf{a}^{(L-1)T}\mathbf{e}^{(L)}\), \(\mathbf{e}^{(L)T}\mathbf{a}^{(L-1)}\), hay \(\mathbf{e}^{(L)}\mathbf{a}^{(L-1)T}\)? <em>Quy tắc bỏ túi</em> cần nhớ là <strong>chiều của hai ma trận ở hai vế phải như nhau</strong>. Thử một chút, vế trái là đạo hàm theo \(\mathbf{W}^{(L)}\) là một đại lượng có chiều (<em>dimension</em>, not <em>afternoon</em>) bằng chiều của ma trận này, tức chiều là \(\mathbb{R}^{d^{(L-1)}\times d^{(L)}}\). Vế phải, \(\mathbf{e}^{(L)} \in \mathbf{R}^{d^{(L)} \times 1}\), \(\mathbf{a}^{(L-1)} \in \mathbb{R}^{d^{(L-1)} \times 1}\). Để hai vế có chiều bằng nhau thì ta phải lấy \(\mathbf{a}^{(L-1)} \mathbf{e}^{(L)T}\). Cũng chú ý thêm <strong>rằng đạo hàm theo một ma trận của một hàm số nhận giá trị thực (scalar) sẽ có chiều bằng với chiều của ma trận đó!!</strong></p>

<p><a name="-backpropagation-cho-batch-mini-batch-gradient-descent"></a></p>

<h3 id="32-backpropagation-cho-batch-mini-batch-gradient-descent">3.2. Backpropagation cho Batch (mini-batch) Gradient Descent</h3>

<p>Nếu chúng ta muốn thực hiện Batch hoặc mini-batch Gradient Descent thì sao? Trong thực tế, <a href="/2017/01/16/gradientdescent2/#-mini-batch-gradient-descent">mini-batch GD</a> được sử dụng nhiều nhất. Nếu lượng dữ liệu là nhỏ, <a href="/2017/01/16/gradientdescent2/#-batch-gradient-descent">Batch GD</a> trực tiếp được sử dụng.</p>

<p>Khi đó, cặp (input, output) sẽ ở dạng ma trận \((\mathbf{X, Y})\). Giả sử rằng mỗi lần tính toán, ta lấy \(N\) dữ liệu để tính toán. Khi đó, \(\mathbf{X} \in \mathbb{R}^{d^{(0)} \times N}, \mathbf{Y} \in \mathbb{R}^{d^{(L)}\times N}\). Với \(d^{(0)} = d\) là chiều của dữ liệu đầu vào (không tính bias).</p>

<p>Khi đó các activation sau mỗi layer sẽ có dạng \(\mathbf{A}^{(l)} \in \mathbb{R}^{d^{(l)} \times N}\). Tương tự thế, \(\mathbf{E}^{(l)} \in \mathbb{R}^{d^{(l)}\times N}\). Và ta cũng có thể suy ra công thức cập nhật như sau.</p>

<hr />

<ol>
  <li>Bước feedforward: Với toàn bộ dữ liệu (batch) hoặc một nhóm dữ liệu (mini-batch) đầu vào \(\mathbf{X}\), tính giá trị đầu ra của network, trong quá trình tính toán, lưu lại các <em>activation</em> \(\mathbf{A}^{(l)}\) tại mỗi layer. Mỗi cột của \(\mathbf{A}^{(l)}\) tương ứng với một cột của \(\mathbf{X}\), tức một điểm dữ liệu đầu vào.</li>
  <li>Với output layer, tính: \[\mathbf{E}^{(L)} = \frac{\partial J}{\partial \mathbf{Z}^{(L)}}\]</li>
  <li>Từ đó suy ra:
 \[
 \begin{eqnarray}
 \frac{\partial J}{\partial \mathbf{W}^{(L)}} &amp;=&amp;  \mathbf{A}^{(L-1)}\mathbf{E}^{(L)T}\newline
 \frac{\partial J}{\partial \mathbf{b}^{(L)}} &amp;=&amp;  \sum_{n=1}^N\mathbf{e}_n^{(L)}
 \end{eqnarray}
 \]</li>
  <li>Với \(l = L-1, L-2, …, 1\), tính:
 \[
 \mathbf{E}^{(l)} = \left( \mathbf{W}^{(l+1)} \mathbf{E}^{(l+1)} \right) \odot f’(\mathbf{Z}^{(l)})
 \]
 trong đó \(\odot\) là <em>element-wise product</em> hay <em>Hadamard product</em> tức lấy từng thành phần của hai ma trận nhân với nhau để được ma trận kết quả.</li>
  <li>Cập nhật đạo hàm cho ma trận trọng số và vector biases:
 \[
 \begin{eqnarray}
 \frac{\partial J}{\partial \mathbf{W}^{(l)}} &amp;=&amp;  \mathbf{A}^{(l-1)}\mathbf{E}^{(l)T}\newline
 \frac{\partial J}{\partial \mathbf{b}^{(l)}} &amp;=&amp;  \sum_{n=1}^N\mathbf{e}_n^{(l)}
 \end{eqnarray}
 \]</li>
</ol>

<hr />

<p>Mặc dù khi làm thực nghiệm, các công cụ có hỗ trợ việc tự động tính Backpropagation, tôi vẫn không muốn bỏ qua phần này. Hiểu backpropagation rất quan trọng! Xem thêm <a href="https://medium.com/@karpathy/yes-you-should-understand-backprop-e2f06eab496b#.g76s9xxzc">Yes you should understand backprop</a>.</p>

<p><a name="-vi-du-tren-python"></a></p>

<h2 id="4-ví-dụ-trên-python">4. Ví dụ trên Python</h2>
<p>Source code cho ví dụ này có thể được xem <a href="https://github.com/tiepvupsu/tiepvupsu.github.io/blob/master/assets/14_mlp/Example%20.ipynb">tại đây</a>.</p>

<p>Ví dụ tôi nêu trong mục này mang mục đích giúp các bạn hiểu thực sự cách lập trình cho backpropagation. Khi làm thực nghiệm, chúng ta sử dụng các thư viện sẵn có giúp tính backpropagation. Ví dụ như <a href="http://scikit-learn.org/stable/modules/neural_networks_supervised.html">Sklearn cho MLP</a>.</p>

<p>Để kiểm chứng lại những gì tôi viết trên đây có đúng không, chúng ta cùng xem một ví dụ. Ý tưởng trong ví dụ này được lấy từ <a href="http://cs231n.github.io/neural-networks-case-study/">CS231n Convolutional Neural Networks for Visual Recognition</a>, phần code dưới đây tôi viết lại cho phù hợp với những tính toán và ký hiệu phía trên.</p>

<p><a name="-tao-du-lieu-gia"></a></p>

<h3 id="41-tạo-dữ-liệu-giả">4.1. Tạo dữ liệu giả</h3>

<p>Trước hết, ta tạo dữ liệu cho 3 classes mà không có hai class nào là <em>linearly separable</em>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># To support both python 2 and python 3
</span><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">division</span><span class="p">,</span> <span class="n">print_function</span><span class="p">,</span> <span class="n">unicode_literals</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">N</span> <span class="o">=</span> <span class="mi">100</span> <span class="c1"># number of points per class
</span><span class="n">d0</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1"># dimensionality
</span><span class="n">C</span> <span class="o">=</span> <span class="mi">3</span> <span class="c1"># number of classes
</span><span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">d0</span><span class="p">,</span> <span class="n">N</span><span class="o">*</span><span class="n">C</span><span class="p">))</span> <span class="c1"># data matrix (each row = single example)
</span><span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">N</span><span class="o">*</span><span class="n">C</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="s">'uint8'</span><span class="p">)</span> <span class="c1"># class labels
</span>
<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">C</span><span class="p">):</span>
  <span class="n">ix</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="o">*</span><span class="n">j</span><span class="p">,</span><span class="n">N</span><span class="o">*</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
  <span class="n">r</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">N</span><span class="p">)</span> <span class="c1"># radius
</span>  <span class="n">t</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="n">j</span><span class="o">*</span><span class="mi">4</span><span class="p">,(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">,</span><span class="n">N</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="n">N</span><span class="p">)</span><span class="o">*</span><span class="mf">0.2</span> <span class="c1"># theta
</span>  <span class="n">X</span><span class="p">[:,</span><span class="n">ix</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">c_</span><span class="p">[</span><span class="n">r</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="n">r</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">t</span><span class="p">)].</span><span class="n">T</span>
  <span class="n">y</span><span class="p">[</span><span class="n">ix</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span>
<span class="c1"># lets visualize the data:
# plt.scatter(X[:N, 0], X[:N, 1], c=y[:N], s=40, cmap=plt.cm.Spectral)
</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="p">:</span><span class="n">N</span><span class="p">],</span> <span class="n">X</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">:</span><span class="n">N</span><span class="p">],</span> <span class="s">'bs'</span><span class="p">,</span> <span class="n">markersize</span> <span class="o">=</span> <span class="mi">7</span><span class="p">);</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">N</span><span class="p">:</span><span class="mi">2</span><span class="o">*</span><span class="n">N</span><span class="p">],</span> <span class="n">X</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="p">:</span><span class="mi">2</span><span class="o">*</span><span class="n">N</span><span class="p">],</span> <span class="s">'ro'</span><span class="p">,</span> <span class="n">markersize</span> <span class="o">=</span> <span class="mi">7</span><span class="p">);</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">N</span><span class="p">:],</span> <span class="n">X</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">N</span><span class="p">:],</span> <span class="s">'g^'</span><span class="p">,</span> <span class="n">markersize</span> <span class="o">=</span> <span class="mi">7</span><span class="p">);</span>
<span class="c1"># plt.axis('off')
</span><span class="n">plt</span><span class="p">.</span><span class="n">xlim</span><span class="p">([</span><span class="o">-</span><span class="mf">1.5</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylim</span><span class="p">([</span><span class="o">-</span><span class="mf">1.5</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">])</span>
<span class="n">cur_axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">gca</span><span class="p">()</span>
<span class="n">cur_axes</span><span class="p">.</span><span class="n">axes</span><span class="p">.</span><span class="n">get_xaxis</span><span class="p">().</span><span class="n">set_ticks</span><span class="p">([])</span>
<span class="n">cur_axes</span><span class="p">.</span><span class="n">axes</span><span class="p">.</span><span class="n">get_yaxis</span><span class="p">().</span><span class="n">set_ticks</span><span class="p">([])</span>

<span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'EX.png'</span><span class="p">,</span> <span class="n">bbox_inches</span><span class="o">=</span><span class="s">'tight'</span><span class="p">,</span> <span class="n">dpi</span> <span class="o">=</span> <span class="mi">600</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<div class="imgcap">
 <img src="/assets/14_mlp/EX.png" align="center" width="600" />
 <div class="thecap">Hình 7: Phân bố dữ liệu theo class.</div>
</div>
<hr />

<p>Với dữ liệu được phân bố thế này, Softmax Regression không thể thực hiện được vì <a href="/2017/02/17/softmax/#-boundary-tao-boi-softmax-regression-la-linear">Bounray giữa các class tạo bởi Softmax Regression có dạng linear</a>. Chúng ta hãy làm một thí nghiệm nhỏ bằng cách thêm một <em>Hidden layer</em> vào giữa Input layer vả output layer của Softmax Regression. Activation function của Hidden layer là hàm ReLU: \(f(s) = \max(s, 0)\), \(f’(s) = 0 ~~\text{if}~ s \leq 0\), \(f’(s) = 1 ~\text{otherwise}\).</p>

<hr />

<div class="imgcap">
 <img src="/assets/14_mlp/ex_nn.png" align="center" width="600" />
 <div class="thecap">Hình 8: 2-layer Neural Networks.</div>
</div>
<hr />

<p>Bây giờ chúng ta sẽ áp dụng Batch Gradient Descent cho bài toán này (vì lượng dữ liệu là nhỏ). Trước hết cần thực tìm công thức tính các activation và output.
<a name="-tinh-toan-feedforward"></a></p>

<h3 id="42-tính-toán-feedforward">4.2. Tính toán Feedforward</h3>
<p>\[
\begin{eqnarray}
\mathbf{Z}^{(1)} &amp;=&amp; \mathbf{W}^{(1)T}\mathbf{X} \newline
\mathbf{A}^{(1)} &amp;=&amp; \max(\mathbf{Z}^{(1)}, \mathbf{0}) \newline
\mathbf{Z}^{(2)} &amp;=&amp; \mathbf{W}^{(2)T}\mathbf{A}^{(1)} \newline
\mathbf{\hat{Y}} = \mathbf{A}^{(2)} &amp;=&amp; \text{softmax}(\mathbf{Z}^{(2)})
\end{eqnarray}
\]</p>

<p><a href="/2017/02/17/softmax/#-ham-mat-mat-cho-softmax-regression">Hàm mất mát được tính như sau:</a></p>

<p>\[
J \triangleq J(\mathbf{W, b}; \mathbf{X, Y}) = -\frac{1}{N}\sum_{i = 1}^N \sum_{j = 1}^C y_{ji}\log(\hat{y}_{ji})
\]
Ở đây, tôi đã cho thêm thừa số \(\frac{1}{N}\) để tránh hiện tượng tổng quá lớn với Batch GD. Về mặt toán học, thừa số này không làm thay đổi nghiệm của bài toán.</p>

<p><a name="-tinh-toan-backpropagation"></a></p>

<h3 id="43-tính-toán-backpropagation">4.3. Tính toán Backpropagation</h3>
<p>Áp dụng <a href="#-backpropagation-cho-batch-mini-batch-gradient-descent">quy tắc như đã trình bày ở trên</a> và
<a name="tai-lieu-tham-khao"></a> và <a href="/2017/02/17/softmax/#-toi-uu-ham-mat-mat">đạo hàm theo ma trận trọng số của Softmax Regression</a>, ta có:</p>

<p>\[
\begin{eqnarray}
\mathbf{E}^{(2)} &amp;=&amp; \frac{\partial J}{\partial \mathbf{Z}^{(2)}} =\frac{1}{N}(\mathbf{\hat{Y}} - \mathbf{Y}) \newline
\frac{\partial J}{\partial \mathbf{W}^{(2)}} &amp;=&amp; \mathbf{A}^{(1)}  \mathbf{E}^{(2)T} \newline
\frac{\partial J}{\partial \mathbf{b}^{(2)}} &amp;=&amp; \sum_{n=1}^N\mathbf{e}_n^{(2)} \newline
\mathbf{E}^{(1)} &amp;=&amp; \left(\mathbf{W}^{(2)}\mathbf{E}^{(2)}\right) \odot f’(\mathbf{Z}^{(1)}) \newline
\frac{\partial J}{\partial \mathbf{W}^{(1)}} &amp;=&amp; \mathbf{A}^{(0)}  \mathbf{E}^{(1)T} = \mathbf{X}\mathbf{E}^{(1)T}\newline
\frac{\partial J}{\partial \mathbf{b}^{(1)}} &amp;=&amp; \sum_{n=1}^N\mathbf{e}_n^{(1)} \newline
\end{eqnarray}
\]</p>

<p>Từ đó ta có thể bắt đầu lập trình như sau:</p>

<p><a name="-mot-so-ham-phu-tro"></a></p>

<h3 id="44-một-số-hàm-phụ-trợ">4.4. Một số hàm phụ trợ</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">softmax</span><span class="p">(</span><span class="n">V</span><span class="p">):</span>
    <span class="n">e_V</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">V</span> <span class="o">-</span> <span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="n">V</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">keepdims</span> <span class="o">=</span> <span class="bp">True</span><span class="p">))</span>
    <span class="n">Z</span> <span class="o">=</span> <span class="n">e_V</span> <span class="o">/</span> <span class="n">e_V</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">Z</span>

<span class="c1">## One-hot coding
</span><span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">sparse</span>
<span class="k">def</span> <span class="nf">convert_labels</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">C</span> <span class="o">=</span> <span class="mi">3</span><span class="p">):</span>
    <span class="n">Y</span> <span class="o">=</span> <span class="n">sparse</span><span class="p">.</span><span class="n">coo_matrix</span><span class="p">((</span><span class="n">np</span><span class="p">.</span><span class="n">ones_like</span><span class="p">(</span><span class="n">y</span><span class="p">),</span>
        <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)))),</span> <span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">))).</span><span class="n">toarray</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">Y</span>

<span class="c1"># cost or loss function
</span><span class="k">def</span> <span class="nf">cost</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span> <span class="n">Yhat</span><span class="p">):</span>
    <span class="k">return</span> <span class="o">-</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">Y</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">Yhat</span><span class="p">))</span><span class="o">/</span><span class="n">Y</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<p><a name="-phan-chuong-trinh-chinh"></a></p>

<h3 id="44-phần-chương-trình-chính">4.4. Phần chương trình chính</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d0</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">d1</span> <span class="o">=</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">100</span> <span class="c1"># size of hidden layer
</span><span class="n">d2</span> <span class="o">=</span> <span class="n">C</span> <span class="o">=</span> <span class="mi">3</span>
<span class="c1"># initialize parameters randomly
</span><span class="n">W1</span> <span class="o">=</span> <span class="mf">0.01</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="n">d0</span><span class="p">,</span> <span class="n">d1</span><span class="p">)</span>
<span class="n">b1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">d1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="n">W2</span> <span class="o">=</span> <span class="mf">0.01</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">)</span>
<span class="n">b2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">d2</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>

<span class="n">Y</span> <span class="o">=</span> <span class="n">convert_labels</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">C</span><span class="p">)</span>
<span class="n">N</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">eta</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># learning rate
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">10000</span><span class="p">):</span>
    <span class="c1">## Feedforward
</span>    <span class="n">Z1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">W1</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">X</span><span class="p">)</span> <span class="o">+</span> <span class="n">b1</span>
    <span class="n">A1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">maximum</span><span class="p">(</span><span class="n">Z1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">Z2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">W2</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">A1</span><span class="p">)</span> <span class="o">+</span> <span class="n">b2</span>
    <span class="n">Yhat</span> <span class="o">=</span> <span class="n">softmax</span><span class="p">(</span><span class="n">Z2</span><span class="p">)</span>

    <span class="c1"># print loss after each 1000 iterations
</span>    <span class="k">if</span> <span class="n">i</span> <span class="o">%</span><span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="c1"># compute the loss: average cross-entropy loss
</span>        <span class="n">loss</span> <span class="o">=</span> <span class="n">cost</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span> <span class="n">Yhat</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"iter %d, loss: %f"</span> <span class="o">%</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">loss</span><span class="p">))</span>

    <span class="c1"># backpropagation
</span>    <span class="n">E2</span> <span class="o">=</span> <span class="p">(</span><span class="n">Yhat</span> <span class="o">-</span> <span class="n">Y</span> <span class="p">)</span><span class="o">/</span><span class="n">N</span>
    <span class="n">dW2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">A1</span><span class="p">,</span> <span class="n">E2</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>
    <span class="n">db2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">E2</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">keepdims</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
    <span class="n">E1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">W2</span><span class="p">,</span> <span class="n">E2</span><span class="p">)</span>
    <span class="n">E1</span><span class="p">[</span><span class="n">Z1</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># gradient of ReLU
</span>    <span class="n">dW1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">E1</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>
    <span class="n">db1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">E1</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">keepdims</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>

    <span class="c1"># Gradient Descent update
</span>    <span class="n">W1</span> <span class="o">+=</span> <span class="o">-</span><span class="n">eta</span><span class="o">*</span><span class="n">dW1</span>
    <span class="n">b1</span> <span class="o">+=</span> <span class="o">-</span><span class="n">eta</span><span class="o">*</span><span class="n">db1</span>
    <span class="n">W2</span> <span class="o">+=</span> <span class="o">-</span><span class="n">eta</span><span class="o">*</span><span class="n">dW2</span>
    <span class="n">b2</span> <span class="o">+=</span> <span class="o">-</span><span class="n">eta</span><span class="o">*</span><span class="n">db2</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iter 0, loss: 1.098815
iter 1000, loss: 0.150974
iter 2000, loss: 0.057996
iter 3000, loss: 0.039621
iter 4000, loss: 0.032148
iter 5000, loss: 0.028054
iter 6000, loss: 0.025346
iter 7000, loss: 0.023311
iter 8000, loss: 0.021727
iter 9000, loss: 0.020585
</code></pre></div></div>

<p><a name="-ket-qua"></a></p>

<h3 id="45-kết-quả">4.5. Kết quả</h3>
<p>Như vậy hàm mất mát giảm dần khi số vòng lặp tăng lên. Bây giờ chúng ta cùng áp dụng ngược network này vào phân loại <em>dữ liệu training</em>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Z1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">W1</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">X</span><span class="p">)</span> <span class="o">+</span> <span class="n">b1</span>
<span class="n">A1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">maximum</span><span class="p">(</span><span class="n">Z1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">Z2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">W2</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">A1</span><span class="p">)</span> <span class="o">+</span> <span class="n">b2</span>
<span class="n">predicted_class</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">Z2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'training accuracy: %.2f %%'</span> <span class="o">%</span> <span class="p">(</span><span class="mi">100</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">predicted_class</span> <span class="o">==</span> <span class="n">y</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>training accuracy: 99.33 %
</code></pre></div></div>

<p>Vậy là trong 300 điểm, chỉ có 2 điểm bị phân loại sai! Dưới đây là hình minh hoạ <em>khu vực</em> của mỗi class:</p>

<hr />

<div class="imgcap">
 <img src="/assets/14_mlp/ex_res100.png" align="center" width="600" />
 <div class="thecap">Hình 9: Kết quả khi sử dụng 1 hidden layer với 100 units.</div>
</div>
<hr />

<p>Hai điểm bị phân lớp sai có lẽ nằm gần khu vực trung tâm.</p>

<p>Vậy là chỉ thêm 1 hidden layer, Neural Network đã có thể xây dựng được boundary <em>phi tuyến</em>. Kết luận đầu tiên ở đây là khả năng biểu diễn của MLP tốt hơn rất nhiều so với 1-layer Neural Network.</p>

<p>Kết quả bên trên được thực hiện khi số lượng units trong hidden layer là <code class="language-plaintext highlighter-rouge">d1 = 100</code>. Chúng ta thử thay đổi giá trị này bởi <code class="language-plaintext highlighter-rouge">d1 = 5, 10, 15, 20</code> xem kết quả khác nhau như thế nào. Dưới đây là hình mình họa:</p>

<hr />

<div>
<table width="100%" style="border: 0px solid white">
   <tr>
        <td width="30%" style="border: 0px solid white">
        <img style="display:block;" width="100%" src="/assets/14_mlp/ex_res5.png" />
         </td>
        <td width="30%" style="border: 0px solid white">
        <img style="display:block;" width="100%" src="/assets/14_mlp/ex_res10.png" />
        </td>
    </tr>
    <tr>
         <td width="30%" style="border: 0px solid white">
         <img style="display:block;" width="100%" src="/assets/14_mlp/ex_res15.png" />
          </td>
         <td width="30%" style="border: 0px solid white">
         <img style="display:block;" width="100%" src="/assets/14_mlp/ex_res20.png" />
         </td>
     </tr>

</table>
<div class="thecap"> Hình 10: Kết quả với số lượng units trong hidden layer là khác nhau. </div>
</div>
<hr />

<p>Có một vài nhận xét như sau:</p>

<ul>
  <li>
    <p>Khi số lượng hidden units tăng lên, độ chính xác của mô hình tạo được cũng tăng lên.</p>
  </li>
  <li>
    <p>Với <code class="language-plaintext highlighter-rouge">d1 = 5</code>, đường phân định giữa ba classes gần như là đường thẳng.</p>
  </li>
  <li>
    <p>Với <code class="language-plaintext highlighter-rouge">d1 = 15</code>, mặc dù kết quả đã đạt 99.33%, vẫn có một vùng đỏ nhỏ nằm giữa nhánh màu lục và màu lam, và một vùng màu lam khá lớn giữa màu đỏ và lục. Khi một điểm dữ liệu test rơi vào những vùng này, nó sẽ bị phân loại sai.</p>
  </li>
  <li>
    <p>Với <code class="language-plaintext highlighter-rouge">d1 = 20</code>, kết quả nhận được đã tương đối giống với <code class="language-plaintext highlighter-rouge">d1 = 100</code>. Mặc dù các đường boundary không được trơn tru cho lắm.</p>
  </li>
</ul>

<p><a name="-thao-luan"></a></p>

<h2 id="5-thảo-luận">5. Thảo luận</h2>

<ul>
  <li>
    <p><a href="http://www.dartmouth.edu/~gvc/Cybenko_MCSS.pdf">Người ta đã chứng minh được rằng</a>, với một hàm số liên tục bất kỳ \(f(x)\) và một số \(\varepsilon &gt;0\), luôn luôn tồn tại một Neural Network với predicted output có dạng \(g(x)\) với một hidden layer (với số hidden units đủ lớn và <em>nonlinear</em> activation function phù hợp) sao cho với mọi \(x, |f(x) - g(x)| &lt; \varepsilon\). Nói một cách khác, Neural Network có khả năng xấp xỉ hầu hết các hàm liên tục.</p>
  </li>
  <li>
    <p>Trên thực tế, việc tìm ra số lượng hidden units và <em>nonlinear</em> activation function nói trên nhiều khi bất khả thi. Thay vào đó, thực nghiệm chứng minh rằng Neural Networks với nhiều hidden layers kết hợp với các <em>nonlinear</em> activation function (đơn giản như ReLU) có khả năng xấp xỉ (khả năng biểu diễn) training data tốt hơn.</p>
  </li>
  <li>
    <p>Khi số lượng hidden layers lớn lên, số lượng hệ số cần tối ưu cũng lớn lên và mô hình sẽ trở nên phức tạp. Sự phức tạp này ảnh hưởng tới hai khia cạnh. Thứ nhất, tốc độ tính toán sẽ bị chậm đi rất nhiều. Thứ hai, nếu mô hình quá phức tạp, nó có thể biểu diễn rất tốt training data, nhưng lại không biểu diễn tốt test data. Hiện tượng này gọi là <a href="https://en.wikipedia.org/wiki/Overfitting">Overfitting</a>, tôi sẽ trình bày trong bài sau.</p>
  </li>
  <li>
    <p>Nếu mọi units của một layer được kết nối với mọi unit của layer tiếp theo (như chúng ta đang xét trong baì này), ta gọi đó là fully connected layer (kết nối hoàn toàn). Neural Networks với toàn fully connected layer ít được sử dụng trong thực tế. Thay vào đó, có nhiều phương pháp giúp làm giảm độ phức tạp của mô hình bằng cách giảm số lượng kết nối bằng cách cho nhiều kết nối bằng 0 (ví dụ, <a href="https://web.stanford.edu/class/cs294a/sparseAutoencoder_2011new.pdf">sparse autoencoder</a>), hoặc các hệ số được ràng buộc giống nhau (để giảm số hệ số cần tối ưu) (ví dụ, <a href="http://cs231n.github.io/convolutional-networks/">Convolutional Neural Networks (CNNs / ConvNets)</a>). Bạn đọc muốn tìm hiểu thêm có thể bắt đầu <a href="http://deeplearning.net">tại đây</a>.</p>
  </li>
  <li>
    <p>Đây là bài cuối cùng trong chuỗi bài về Neural Networks. Viết một bài về Deep Learning sẽ tốn thời gian hơn rất nhiều, trong 1 tuần tôi không đủ khả năng hoàn thành được. Bài tiếp theo tôi sẽ nói về <a href="https://en.wikipedia.org/wiki/Overfitting">Overfitting</a>, sau đó chuyển sang một phương pháp classification rất phổ biến khác: <a href="https://en.wikipedia.org/wiki/Support_vector_machine">Support Vector Machine</a>.</p>
  </li>
  <li>
    <p>Về backpropagation, có rất nhiều điều phải nói nữa. Nếu có thể, tôi xin phép được trình bày sau. Bài này cũng đã đủ dài.</p>
  </li>
</ul>

<p><a name="-tai-lieu-tham-khao"></a></p>

<h2 id="6-tài-liệu-tham-khảo">6. Tài liệu tham khảo</h2>

<p>[1] <a href="http://cs231n.github.io/neural-networks-1/">Neural Networks Part 1: Setting up the Architecture - Andrej Karpathy</a></p>

<p>[2] <a href="http://cs231n.github.io/neural-networks-case-study/">Neural Networks, Case study - Andrej Karpathy</a></p>

<p>[3] <a href="https://web.stanford.edu/class/cs294a/sparseAutoencoder_2011new.pdf">Lecture Notes on Sparse Autoencoders - Andrew Ng</a></p>

<p>[4] <a href="https://medium.com/@karpathy/yes-you-should-understand-backprop-e2f06eab496b#.g76s9xxzc">Yes you should understand backprop</a></p>

<p>[5] <a href="http://cs231n.github.io/optimization-2/">Backpropagation, Intuitions - Andrej Karpathy</a></p>

<p>[6] <a href="http://neuralnetworksanddeeplearning.com/chap2.html">How the backpropagation algorithm works - Michael Nielsen </a></p>
:ET