I"S<p><strong>Tất cả các bài tập trong bài viết này có thể được thực hiện trực tiếp trên trình duyện qua trang web <a href="https://fundaml.com">FundaML</a></strong></p>

<p>Các số ngẫu nhiên đóng một vài trò cực kỳ quan trọng trong lập trình nói chung và lập trình Machine Learning nói riêng.</p>

<p>Trong bài học này, chúng ta cùng làm quen với các hàm tạo các số ngẫu nhiên cơ bản.</p>

<h2 id="31-mảng-ngẫu-nhiên-các-số-tuân-theo-phân-bố-đều">3.1. Mảng ngẫu nhiên các số tuân theo phân bố đều</h2>
<p>Một trong những điều quan trọng nhất khi lập trình một ngôn ngữ bất kỳ là cách
sử dụng các hàm ngẫu nhiên. Trong bài này, chúng ta sẽ làm quen tới các hàm
ngẫu nhiên trong Numpy và các cách sử dụng chúng trong các bài toán Machine
Learning.</p>

<h3 id="311-hàm-numpyrandomrand">3.1.1. Hàm <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.random.rand.html"><code class="language-plaintext highlighter-rouge">numpy.random.rand</code></a></h3>

<p>Hàm <code class="language-plaintext highlighter-rouge">numpy.random.rand</code> trả về một mảng các số ngẫu nhiên mà mỗi phần tử là một
số ngẫu nhiên có <em>phân bố đều</em> (<em>uniform distribution</em>) trong nửa đoạn <code class="language-plaintext highlighter-rouge">[0, 1)</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">()</span> 
<span class="mf">0.38919680466308004</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">array</span><span class="p">([</span> <span class="mf">0.48677611</span><span class="p">,</span>  <span class="mf">0.70819795</span><span class="p">,</span>  <span class="mf">0.32393605</span><span class="p">])</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">array</span><span class="p">([[</span> <span class="mf">0.29713565</span><span class="p">,</span>  <span class="mf">0.57377171</span><span class="p">],</span>
       <span class="p">[</span> <span class="mf">0.0365262</span> <span class="p">,</span>  <span class="mf">0.04146013</span><span class="p">],</span>
       <span class="p">[</span> <span class="mf">0.63039945</span><span class="p">,</span>  <span class="mf">0.8643891</span> <span class="p">]])</span>
</code></pre></div></div>

<ul>
  <li>
    <p>Nếu số lượng input là 0, hàm trả về một số vô hướng.</p>
  </li>
  <li>
    <p>Nếu có inputs (là các số nguyên dương), hàm này trả về một mảng ngẫu nhiên
có số chiều bằng với số inputs, kích thước mỗi chiều bằng với giá trị của các inputs.</p>
  </li>
</ul>

<h3 id="312-hàm-nprandomseed">3.1.2. Hàm <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.random.seed.html"><code class="language-plaintext highlighter-rouge">np.random.seed</code></a></h3>
<p>Các ngôn ngữ lập trình nói chung không tạo ra các giá trị ‘thực sự ngẫu nhiên’.
Thật vậy, nếu bạn mở python và bắt đầu với:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">()</span>
</code></pre></div></div>

<p>thì kết quả luôn là các số giống nhau ở mỗi lần thử (bạn hãy thoát python và thử
lại nhiều lần xem). Như trên máy tính của tôi, kết quả lúc nào cũng là
<code class="language-plaintext highlighter-rouge">0.38919680466308004</code>. <em>Như vậy, hàm ngẫu nhiên không thực sự sinh ra các giá trị ngẫu nhiên.</em> Tuy nhiên, nếu thực hiện hàm này rất nhiều lần, chúng ta sẽ thu được các các số
nằm trong khoảng <code class="language-plaintext highlighter-rouge">[0, 1)</code> mà xác suất để một điểm nằm trong đoạn <code class="language-plaintext highlighter-rouge">[a, b]</code> với
<code class="language-plaintext highlighter-rouge">0 &lt;= a &lt; b &lt; 1</code> bằng <code class="language-plaintext highlighter-rouge">b - a</code>.</p>

<p>Hàm <code class="language-plaintext highlighter-rouge">np.random.seed()</code> là một hàm được coi như giúp khởi tạo các bộ sinh số ngẫu
nhiên (random generator). Biến số trong seed thường là một số nguyên không
âm 32 bit. Với các giá trị của biến số khác nhau thì sẽ cho ra các số ngẫu
nhiên khác nhau.</p>

<p>Hàm số này được dùng để đối chiều kết quả trong các lần chạy khác nhau trong
các bài toán Machine Learning. Rất nhiều các thuật toán Machine Learning chạy
dựa trên việc tính toán ngẫu nhiên (ví dụ, <a href="https://machinelearningcoban.com/2017/01/16/gradientdescent2/#-stochastic-gradient-descent">Stochastic Gradient Descent</a>
được sử dụng rất nhiều trong các thuật toán tối ưu Neural Networks). Để đối
chiếu kết quả trong nhiều lần chạy trên, người ta thường khởi tạo các random
generator với các <code class="language-plaintext highlighter-rouge">seed</code> như nhau.</p>

<p>Các bạn có thể để ý thấy rằng trong các bài trước tôi thường dùng
<code class="language-plaintext highlighter-rouge">np.random.seed()</code>. Việc đó để đảm bảo rằng kết quả bạn tìm được giống với kết
quả trong code mẫu.</p>

<hr />
<p><strong>Bài tập:</strong> Cho các số <code class="language-plaintext highlighter-rouge">a, b, m, n</code> trong đó <code class="language-plaintext highlighter-rouge">a &lt; b</code> là hai số thực bất kỳ; 
<code class="language-plaintext highlighter-rouge">m</code>, <code class="language-plaintext highlighter-rouge">n</code> là các số nguyên dương. Viết hàm số tạo một mảng hai chiều có 
<code class="language-plaintext highlighter-rouge">shape = (m, n)</code>, các phần tử là các số ngẫu nhiên phân bố đều trong 
nửa đoạn <code class="language-plaintext highlighter-rouge">[a, b)</code>.</p>

<p><strong>Chú ý:</strong></p>
<ol>
  <li>Để kiểm tra mảng trả về có đúng là mảng ngẫu nhiên các phần tử 
trong nửa đoạn \([a, b)\) hay không, tôi sẽ tính kỳ vọng (mean) và phương sai 
(variance) của các phần tử trong mảng đó. Tôi biết rằng nếu \(X\) là một biến 
ngẫu nhiên tuân theo phân phối chuẩn trong nửa đoạn \([a, b)\) thì nó sẽ có kỳ 
vọng và phương sai lần lượt là: 
\[
\frac{b+a}{2}; \quad \frac{(b-a)^2}{12} 
\]</li>
</ol>

<p><strong>Lưu ý rằng đây chỉ là điều kiện cần, không phải điều kiện đủ.</strong></p>

<ol>
  <li>Nếu <code class="language-plaintext highlighter-rouge">X</code> là một biến ngẫu nhiên tuân theo phân phối chuẩn trong nửa đoạn 
<code class="language-plaintext highlighter-rouge">[0, 1)</code> thì <code class="language-plaintext highlighter-rouge">Y = aX + b</code> là một biến ngẫu nhiên tuân theo phân phối chuẩn 
trong nửa đoạn <code class="language-plaintext highlighter-rouge">[b, a + b)</code> nếu <code class="language-plaintext highlighter-rouge">a</code> là một số dương, hoặc <code class="language-plaintext highlighter-rouge">[a+b, b)</code> nếu <code class="language-plaintext highlighter-rouge">a</code> 
là một số âm.</li>
</ol>

<hr />

<h2 id="32-mảng-ngẫu-nhiên-các-số-tuân-theo-phân-phối-chuẩn">3.2. Mảng ngẫu nhiên các số tuân theo phân phối chuẩn</h2>
<p><a href="https://en.wikipedia.org/wiki/Normal_distribution">Phân phối chuẩn</a> 
(normal distribution) hay phân bố Gassian (Gassian distribution)
rất quan trọng trong thực tế và các bài toán kỹ thuật.</p>

<p>Hàm <code class="language-plaintext highlighter-rouge">numpy.random.randn()</code> (chữ <code class="language-plaintext highlighter-rouge">n</code> ở cuối là viết tắt của <em>normal</em>) có chức 
năng tương tự như hàm <code class="language-plaintext highlighter-rouge">np.random.rand</code> nhưng kết quả trả về là mảng có các phần 
tử phân bố theo phân phối chuẩn có kỳ vọng bằng 0 và phương sai bằng 1.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">()</span>
<span class="o">-</span><span class="mf">0.4718968059633623</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">array</span><span class="p">([</span> <span class="mf">0.73658734</span><span class="p">,</span>  <span class="mf">1.1116358</span> <span class="p">,</span> <span class="o">-</span><span class="mf">0.82687362</span><span class="p">])</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">array</span><span class="p">([[</span><span class="o">-</span><span class="mf">1.03072303</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.48099731</span><span class="p">],</span>
       <span class="p">[</span><span class="o">-</span><span class="mf">0.23800829</span><span class="p">,</span>  <span class="mf">0.56195321</span><span class="p">],</span>
       <span class="p">[</span> <span class="mf">0.74327256</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.22951965</span><span class="p">]])</span>
</code></pre></div></div>

<hr />

<p><strong>Bài tập:</strong> 
Cho các số <code class="language-plaintext highlighter-rouge">a, s, m, n</code> với:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">a</code> là một số thực bất kỳ.</li>
  <li><code class="language-plaintext highlighter-rouge">s</code> là một số thực dương.</li>
  <li><code class="language-plaintext highlighter-rouge">m, n</code> là các số nguyên dương.</li>
</ul>

<p>Xây dựng một mảng ngẫu nhiên hai chiều có <code class="language-plaintext highlighter-rouge">shape = (m, n)</code> mà các phần tử của nó 
tuần theo phân phối chuẩn có kỳ vọng bằng <code class="language-plaintext highlighter-rouge">a</code> và phương sai là <code class="language-plaintext highlighter-rouge">s</code>.</p>

<p><strong>Chú ý:</strong> Ký hiệu \(\mathcal{N}(\mu, \sigma^2)\) để chỉ một phân phối chuẩn có 
kỳ vọng \(\mu\) và phương sai \(\sigma^2\). Một biến ngẫu nhiên \(X\) tuân theo 
phân phối chuẩn có kỳ vọng \(\mu\), phương sai \(\sigma^2\) sẽ được ký hiệu là 
\(X \sim \mathcal{N}(\mu, \sigma^2)\).</p>

<p>Nếu \(X \sim \mathcal{N}(\mu, \sigma^2)\) thì:</p>
<ul>
  <li>\(X+a \sim \mathcal{N}( \mu+a, \sigma^2)\) với \(a\) là một số thực bất kỳ.</li>
  <li>\(kX \sim \mathcal{N}(k\mu, k^2\sigma^2)\) với \(k\) là một số thực bất kỳ.</li>
</ul>

<hr />

<h2 id="33-mảng-ngẫu-nhiên-các-số-nguyên">3.3. Mảng ngẫu nhiên các số nguyên</h2>

<p>Hàm tạo mảng các số tự nhiên ngẫu nhiên. Bạn đọc có thể tham khảo trực tiếp
cách sử dụng trong numpy document:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; import numpy as np 
&gt;&gt;&gt; help(np.random.randint)
randint(low, high=None, size=None, dtype='l')
    
    Return random integers from `low` (inclusive) to `high` (exclusive).
    
    Return random integers from the "discrete uniform" distribution of
    the specified dtype in the "half-open" interval [`low`, `high`). If
    `high` is None (the default), then results are from [0, `low`).
</code></pre></div></div>

<p>Chú ý cụm <code class="language-plaintext highlighter-rouge">"discrete uniform" distribution</code>. Điều này tức là mỗi số nguyên
trong nửa đoạn [<code class="language-plaintext highlighter-rouge">low</code>, <code class="language-plaintext highlighter-rouge">high</code>) sẽ xuất hiện với xác suất bằng nhau.
Ví dụ:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># a 2-by-4 np array with random integer elements in {3, 4}
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
<span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]])</span>
</code></pre></div></div>

<p><em>Phần này không có bài tập.</em></p>

<h2 id="34-hoán-vị">3.4. Hoán vị</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">permutation</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">array</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">])</span>
</code></pre></div></div>

<p>Ví dụ trên đây có mục đích là tạo ra một mảng có 10 phần tử bao gồm các số tự
nhiên từ 0 đến 9 sắp xếp theo thứ tự ngẫu nhiên. Mảng này còn được gọi là một
hoán vị của các số từ 0 đến 9.</p>

<p>Hoán vị ngẫu nhiên được sử dụng rất nhiều khi xử lý dữ liệu trong Machine
Learning. Dưới đây là hai ví dụ điển hình.</p>

<h3 id="341-stochastic-gradient-descent">3.4.1. Stochastic Gradient Descent.</h3>

<p>Trong <a href="https://machinelearningcoban.com/2017/01/16/gradientdescent2/#-stochastic-gradient-descent">Stochastic Gradient Descent</a>,
việc quan trọng nhất là ở mỗi epoch, chúng ta cần <em>trộn lẫn</em> thứ tự của dữ liệu 
và lấy ra từng mini-batch trong đó. Cụ thể, nếu coi toàn bộ dữ liệu là một ma 
trận, mỗi hàng là một điểm dữ liệu và có tổng cộng \(N\) điểm. Tại mỗi 
iteration, ta sẽ lấy ra một tập con \(k\) điểm dữ liệu, với \(k \ll N\) để 
cập nhật nghiệm. Trong một epoch, ta cần đảm bảo rằng tất cả các điểm dữ liệu 
đều được lấy ra tại một minibatch nào đó và không có điểm nào được lấy quá một 
lần (giả sử rằng \(N\) chia hết cho \(k\)). Và hơn nữa, việc lấy ra các 
minibatch ở mỗi epoch là khác nhau.</p>

<p>Việc này có thể được thực hiện bằng cách tạo ra một hoán vị ngẫu nhiên của các 
số từ \(0\)( đến \(N-1\) và coi chúng như chỉ số của các điểm dữ liệu. Tại 
minibatch thứ nhất, ta lấy ra các hàng có chỉ số tương ứng với \(k\) số đầu 
tiên trong hoán vị tìm được. Lần lượt như vậy cho tới khi minibatch cuối cùng 
được lấy ra. Sau đó ta lại <em>trộn lẫn</em> dữ liệu bằng một hoán vị ngẫu nhiên khác.</p>

<h3 id="342-chia-dữ-liệu-training-và-test">3.4.2. Chia dữ liệu training và test</h3>
<p>(Bạn đọc có thể tham khảo cách trực tiếp sử dụng thư viện <a href="http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html">tại đây</a>)</p>

<p>Khi kiểm tra một thuật toán Machine Learning, người ta thường chia tập dữ liệu
thu được thành hai phần: training và test (có thể có thêm validation). Một điều
quan trọng là phần phân chia này phải được tạo một cách ngẫu nhiên để tránh việc
dữ liệu được phân chia một cách quá thiên lệch (<em>biased</em>). Và đây là lúc chúng
ta có thể sử dụng các hoán vị ngẫu nhiên.</p>

<p>Giả sử có 100 điểm dữ liệu, ta cần lấy ngẫu nhiên ra 70 điểm làm training test,
30 điểm còn lại làm test set. Cách đơn giản nhất là tạo một hoán vị ngẫu nhiên
của các số từ 0 đến 99. Sau đó 70 điểm có chỉ số là 70 phần tử đầu tiên của mảng
hoán vị được dùng làm training set, 30 điểm còn lại được dùng làm test set.</p>

<hr />

<p><strong>Bài tập:</strong>
Cho hai số tự nhiên <code class="language-plaintext highlighter-rouge">N &gt; k &gt; 0</code> viết hàm số <code class="language-plaintext highlighter-rouge">sample_no_replace(N, k)</code> trả về
ngẫu nhiên <code class="language-plaintext highlighter-rouge">k</code> số tự nhiên nằm trong tập <code class="language-plaintext highlighter-rouge">{0, 1, ..., N-1}</code> sao cho không có hai
số nào trùng nhau.</p>

<p>Việc <em>ngẫu nhiên</em> ở đây sẽ được kiểm chứng bằng cách gọi hàm 
<code class="language-plaintext highlighter-rouge">sample_no_replace(N, k)</code> nhiều lần. Trong toàn bộ các kết quả trả về, tần suất 
xuất hiện của mỗi số trong tập <code class="language-plaintext highlighter-rouge">{0, 1, ..., N-1}</code> phải gần bằng nhau.</p>

<p><em>Giả sử <code class="language-plaintext highlighter-rouge">X</code> là ma trận chứa <code class="language-plaintext highlighter-rouge">N</code> điểm dữ liệu theo hàng. Nếu 
<code class="language-plaintext highlighter-rouge">idx =sample_no_replace(N, k)</code> là kết quả trả về của hàm bạn đã viết, <code class="language-plaintext highlighter-rouge">k</code> điểm 
ngẫu nhiên của <code class="language-plaintext highlighter-rouge">X</code> có thể được lấy ra bằng <code class="language-plaintext highlighter-rouge">X[idx, :]</code>.</em></p>

<hr />

<p>(<em>còn nữa</em>)</p>

:ET