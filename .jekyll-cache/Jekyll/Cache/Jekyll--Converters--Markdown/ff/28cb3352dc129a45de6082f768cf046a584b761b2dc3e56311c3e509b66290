I"⁄Û<p>Cho t·ªõi b√¢y gi·ªù, ngo√†i <em>thu·∫≠t to√°n l∆∞·ªùi</em> <a href="/2017/01/08/knn/">K-nearest neighbors</a>, t√¥i ƒë√£ gi·ªõi thi·ªáu v·ªõi b·∫°n ƒë·ªçc hai thu·∫≠t to√°n cho c√°c b√†i to√°n Classification: <a href="/2017/01/21/perceptron/">Perceptron Learning Algorithm</a> v√† <a href="/2017/01/27/logisticregression/">Logistic Regression</a>. Hai thu·∫≠t to√°n n√†y ƒë∆∞·ª£c x·∫øp v√†o lo·∫°i Binary Classifiers v√¨ ch√∫ng ƒë∆∞·ª£c x√¢y d·ª±ng d·ª±a tr√™n √Ω t∆∞·ªüng v·ªÅ c√°c b√†i to√°n classification v·ªõi ch·ªâ hai classes. Trong b√†i vi·∫øt n√†y, t√¥i s·∫Ω c√πng c√°c b·∫°n l√†m m·ªôt v√†i v√≠ d·ª• nh·ªè v·ªÅ ·ª©ng d·ª•ng ƒë∆°n gi·∫£n (nh∆∞ng th√∫ v·ªã) c·ªßa c√°c binary classifiers, v√† c√°ch m·ªü r·ªông ch√∫ng ƒë·ªÉ √°p d·ª•ng cho c√°c b√†i to√°n v·ªõi nhi·ªÅu classes (multi-class classification problems).</p>

<p>V√¨ Logistic Regression ch·ªâ y√™u c·∫ßu c√°c classes l√† <a href="/2017/01/21/perceptron/#bai-toan-perceptron"><em>nearly linearly separable</em></a> (t·ª©c c√≥ th·ªÉ c√≥ v√†i ƒëi·ªÉm l√†m ph√° v·ª° t√≠nh linear separability), t√¥i s·∫Ω s·ª≠ d·ª•ng Logistic Regression ƒë·ªÉ ƒë·∫°i di·ªán cho c√°c binary classifiers. <em>Ch√∫ √Ω r·∫±ng, c√≥ r·∫•t nhi·ªÅu c√°c thu·∫≠t to√°n cho binary classification n·ªØa m√† t√¥i ch∆∞a gi·ªõi thi·ªáu. T·∫°m th·ªùi, v·ªõi nh·ªØng g√¨ ƒë√£ vi·∫øt, t√¥i ch·ªâ s·ª≠ d·ª•ng Logistic Regression cho c√°c v√≠ d·ª• v·ªõi code m·∫´u. C√°c k·ªπ thu·∫≠t trong b√†i vi·∫øt n√†y ho√†n to√†n c√≥ th·ªÉ √°p d·ª•ng cho c√°c binary classifiers kh√°c.</em></p>

<p><strong>Trong trang n√†y:</strong> 
<!-- MarkdownTOC --></p>

<ul>
  <li><a href="#-bai-toan-phan-biet-gioi-tinh-dua-tren-anh-khuon-mat">1. B√†i to√°n ph√¢n bi·ªát gi·ªõi t√≠nh d·ª±a tr√™n ·∫£nh khu√¥n m·∫∑t</a>
    <ul>
      <li><a href="#lam-viec-voi-python">L√†m vi·ªác v·ªõi Python</a></li>
    </ul>
  </li>
  <li><a href="#-bai-toan-phan-biet-hai-chu-so-viet-tay">2. B√†i to√°n ph√¢n bi·ªát hai ch·ªØ s·ªë vi·∫øt tay</a></li>
  <li><a href="#-binary-classifiers-cho-multi-class-classification-problems">3. Binary Classifiers cho Multi-class Classification problems</a>
    <ul>
      <li><a href="#one-vs-one">One-vs-one</a></li>
      <li><a href="#hierarchical-phan-tang">Hierarchical (ph√¢n t·∫ßng)</a></li>
      <li><a href="#binary-coding">Binary coding</a></li>
      <li><a href="#one-vs-rest-hay-one-hot-coding">one-vs-rest hay one-hot coding</a></li>
    </ul>
  </li>
  <li><a href="#-thao-luan">4. Th·∫£o lu·∫≠n</a>
    <ul>
      <li><a href="#ket-hop-cac-phuong-phap-tren">K·∫øt h·ª£p c√°c ph∆∞∆°ng ph√°p tr√™n</a></li>
      <li><a href="#bieu-dien-duoi-dang-neural-networks">Bi·ªÉu di·ªÖn d∆∞·ªõi d·∫°ng Neural Networks</a></li>
      <li><a href="#han-che-cua-one-vs-rest">H·∫°n ch·∫ø c·ªßa one-vs-rest</a></li>
    </ul>
  </li>
  <li><a href="#-tai-lieu-tham-khao">5. T√†i li·ªáu tham kh·∫£o</a></li>
</ul>

<!-- /MarkdownTOC -->

<p><a name="-bai-toan-phan-biet-gioi-tinh-dua-tren-anh-khuon-mat"></a></p>

<h2 id="1-b√†i-to√°n-ph√¢n-bi·ªát-gi·ªõi-t√≠nh-d·ª±a-tr√™n-·∫£nh-khu√¥n-m·∫∑t">1. B√†i to√°n ph√¢n bi·ªát gi·ªõi t√≠nh d·ª±a tr√™n ·∫£nh khu√¥n m·∫∑t</h2>
<p>Ch√∫ng ta c√πng b·∫Øt ƒë·∫ßu v·ªõi b√†i to√°n ph√¢n bi·ªát gi·ªõi t√≠nh d·ª±a tr√™n ·∫£nh khu√¥n m·∫∑t. V·ªÅ ·∫£nh khu√¥n m·∫∑t, b·ªô c∆° s·ªü d·ªØ li·ªáu <a href="http://www2.ece.ohio-state.edu/~aleix/ARdatabase.html">AR Face Database</a> ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i.</p>

<p>B·ªô c∆° s·ªü d·ªØ li·ªáu n√†y bao g·ªìm h∆°n 4000 ·∫£nh m√†u t∆∞∆°ng ·ª©ng v·ªõi khu√¥n m·∫∑t c·ªßa 126 ng∆∞·ªùi (70 nam, 56 n·ªØ). V·ªõi m·ªói ng∆∞·ªùi, 26 b·ª©c ·∫£nh ƒë∆∞·ª£c ch·ª•p ·ªü c√°c ƒëi·ªÅu ki·ªán √°nh s√°ng kh√°c nhau, s·∫Øc th√°i bi·ªÉu c·∫£m khu√¥n m·∫∑t kh√°c nhau, v√† b·ªã che m·∫Øt (b·ªüi k√≠nh r√¢m) ho·∫∑c mi·ªáng (b·ªüi khƒÉn); v√† ƒë∆∞·ª£c ch·ª•p t·∫°i hai th·ªùi ƒëi·ªÉm kh√°c nhau c√°ch nhau 2 tu·∫ßn.</p>

<p>ƒê·ªÉ cho ƒë∆°n gi·∫£n, t√¥i s·ª≠ d·ª•ng b·ªô c∆° s·ª≠ AR Face thu g·ªçn (c√≥ th·ªÉ t√¨m th·∫•y trong c√πng trang web ph√≠a tr√™n, m·ª•c <em>Other (relevant) downloads</em>). B·ªô c∆° s·ªü d·ªØ li·ªáu thu g·ªçn n√†y bao g·ªìm 2600 b·ª©c ·∫£nh t·ª´ 50 nam v√† 50 n·ªØ. H∆°n n·ªØa, c√°c khu√¥n m·∫∑t c≈©ng ƒë√£ ƒë∆∞·ª£c x√°c ƒë·ªãnh ch√≠nh x√°c v√† ƒë∆∞·ª£c <em>cropped</em> v·ªõi k√≠ch th∆∞·ªõc 165 x 120 (pixel) b·∫±ng ph∆∞∆°ng ph√°p ƒë∆∞·ª£c m√¥ t·∫£ trong b√†i b√°o <a href="http://lectures.molgen.mpg.de/networkanalysis13/PCAversusLDA_eigenfaces.pdf">PCA veus LDA</a>. T√¥i xin b·ªè qua ph·∫ßn x·ª≠ l√Ω n√†y v√† tr·ª±c ti·∫øp s·ª≠ d·ª•ng ·∫£nh ƒë√£ cropped nh∆∞ m·ªôt s·ªë v√≠ d·ª• d∆∞·ªõi ƒë√¢y:</p>

<div class="imgcap">
<img src="\assets\LogReg2\ARgender.png" align="center" width="800" />
<div class="thecap">H√¨nh 1: C√°c v√≠ d·ª• m·∫´u trong AR Face database thu g·ªçn.</div>
</div>

<p><strong>L∆∞u √Ω:</strong></p>

<ul>
  <li>
    <p><em>V√¨ l√Ω do b·∫£n quy·ªÅn, t√¥i kh√¥ng ƒë∆∞·ª£c ph√©p chia s·∫ª v·ªõi c√°c b·∫°n b·ªô d·ªØ li·ªáu n√†y. C√°c b·∫°n mu·ªën s·ªü h·ªØu c√≥ th·ªÉ li√™n l·∫°c v·ªõi t√°c gi·∫£ nh∆∞ h∆∞·ªõng d·∫´n ·ªü trong website <a href="http://www2.ece.ohio-state.edu/~aleix/ARdatabase.html">AR Face Database</a>. M·ªôt khi c√°c b·∫°n ƒë√£ c√≥ t√†i kho·∫£n ƒë·ªÉ download, t√¥i mong c√°c b·∫°n t√¥n tr·ªçng t√°c gi·∫£ v√† kh√¥ng chia s·∫ª tr·ª±c ti·∫øp v·ªõi b·∫°n b√®.</em></p>
  </li>
  <li>
    <p><em>C√≥ m·ªôt c√°ch ƒë∆°n gi·∫£n v√† nhanh h∆°n ƒë·ªÉ l·∫•y ƒë∆∞·ª£c c√°c feature vector (sau b∆∞·ªõc <a href="/general/2017/02/06/featureengineering/">Feature Engineering</a>)  c·ªßa c∆° s·ªü d·ªØ li·ªáu n√†y m√† kh√¥ng c·∫ßn li√™n l·∫°c v·ªõi t√°c gi·∫£. C√°c b·∫°n c√≥ th·ªÉ t√¨m  <a href="https://www.umiacs.umd.edu/~zhuolin/projectlcksvd.html">t·∫°i ƒë√¢y</a>, ph·∫ßn <strong>Downloads</strong>, m·ª•c <strong>Random face features for AR database</strong>.</em></p>
  </li>
</ul>

<p>M·ªói b·ª©c ·∫£nh trong AR Face thu g·ªçn ƒë∆∞·ª£c ƒë·∫∑t t√™n d∆∞·ªõi d·∫°ng <code class="language-plaintext highlighter-rouge">G-xxx-yy.bmp</code> Trong ƒë√≥: <code class="language-plaintext highlighter-rouge">G</code> nh·∫≠n m·ªôt trong hai gi√° tr·ªã <code class="language-plaintext highlighter-rouge">M</code> (man) ho·∫∑c <code class="language-plaintext highlighter-rouge">W</code> (woman); <code class="language-plaintext highlighter-rouge">xxx</code> l√† id c·ªßa ng∆∞·ªùi, nh·∫≠n g√≠a tr·ªã t·ª´ <code class="language-plaintext highlighter-rouge">001</code> ƒë·∫øn <code class="language-plaintext highlighter-rouge">050</code>; <code class="language-plaintext highlighter-rouge">yy</code> l√† ƒëi·ªÅu ki·ªán ch·ª•p, nh·∫≠n gi√° tr·ªã t·ª´ <code class="language-plaintext highlighter-rouge">01</code> ƒë·∫øn <code class="language-plaintext highlighter-rouge">26</code>, trong ƒë√≥ c√°c ƒëi·ªÅu ki·ªán c√≥ s·ªë th·ª© t·ª± t·ª´ <code class="language-plaintext highlighter-rouge">01</code> ƒë·∫øn <code class="language-plaintext highlighter-rouge">07</code> v√† t·ª´ <code class="language-plaintext highlighter-rouge">14</code> ƒë·∫øn <code class="language-plaintext highlighter-rouge">20</code> l√† c√°c khu√¥n m·∫∑t kh√¥ng b·ªã che b·ªüi k√≠nh ho·∫∑c khƒÉn. T√¥i t·∫°m g·ªçi m·ªói <em>ƒëi·ªÅu ki·ªán</em> n√†y l√† m·ªôt <em>view</em>.</p>

<p>ƒê·ªÉ l√†m v√≠ d·ª• cho thu·∫≠t to√°n Logistic Regression, t√¥i l·∫•y ·∫£nh c·ªßa 25 nam v√† 25 n·ªØ ƒë·∫ßu ti√™n l√†m t·∫≠p training set; 25 nam v√† 25 n·ªØ c√≤n l·∫°i l√†m test set. V·ªõi m·ªói ng∆∞·ªùi, t√¥i ch·ªâ l·∫•y c√°c khu√¥n m·∫∑t kh√¥ng b·ªã che b·ªüi k√≠nh v√† khƒÉn.</p>

<p><strong>Feature Extraction</strong>: v√¨ m·ªói b·ª©c ·∫£nh c√≥ k√≠ch th∆∞·ªõc <code class="language-plaintext highlighter-rouge">3x165x120</code> (s·ªë channels <code class="language-plaintext highlighter-rouge">3</code>, chi·ªÅu cao <code class="language-plaintext highlighter-rouge">165</code>, chi·ªÅu r·ªông <code class="language-plaintext highlighter-rouge">120</code>) l√† m·ªôt s·ªë kh√° l·ªõn n√™n ta s·∫Ω l√†m th·ª±c hi·ªán Feature Extraction b·∫±ng hai b∆∞·ªõc ƒë∆°n gi·∫£n sau (<em>b·∫°n ƒë·ªçc ƒë∆∞·ª£c khuy·∫øn kh√≠ch ƒë·ªçc b√†i <a href="/general/2017/02/06/featureengineering/">Gi·ªõi thi·ªáu v·ªÅ Feature Engineering</a></em>):</p>

<ul>
  <li>
    <p>Chuy·ªÉn ·∫£nh m√†u v·ªÅ ·∫£nh x√°m theo c√¥ng th·ª©c <code class="language-plaintext highlighter-rouge">Y' = 0.299 R + 0.587 G + 0.114 B </code> (Xem th√™m t·∫°i <a href="https://en.wikipedia.org/wiki/Grayscale#Luma_coding_in_video_systems">Grayscale - wiki</a>).</p>
  </li>
  <li>
    <p><em>K√©o d√†i</em> ·∫£nh x√°m thu ƒë∆∞·ª£c th√†nh 1 vector h√†ng c√≥ s·ªë chi·ªÅu <code class="language-plaintext highlighter-rouge">165x120</code>, sau ƒë√≥ s·ª≠ d·ª•ng m·ªôt <em>random projection matrix</em> ƒë·ªÉ gi·∫£m s·ªë chi·ªÅu v·ªÅ <code class="language-plaintext highlighter-rouge">500</code>. B·∫°n ƒë·ªçc c√≥ th·ªÉ thay gi√° tr·ªã n√†y b·∫±ng c√°c s·ªë kh√°c nh·ªè h∆°n <code class="language-plaintext highlighter-rouge">1000</code>.</p>
  </li>
</ul>

<p>Ch√∫ng ta c√≥ th·ªÉ b·∫Øt ƒë·∫ßu l√†m vi·ªác v·ªõi Python ngay b√¢y gi·ªù. T√¥i s·∫Ω s·ª≠ d·ª•ng h√†m <a href="http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html">sklearn.linear_model.LogisticRegression</a> trong th∆∞ vi·ªán <code class="language-plaintext highlighter-rouge">sklearn</code> cho c√°c v√≠ d·ª• trong b√†i n√†y. N·∫øu kh√¥ng mu·ªën ƒë·ªçc ph·∫ßn n√†y, b·∫°n c√≥ th·ªÉ l·∫•y <a href="/assets/LogReg2/ARGender.ipynb">source code ·ªü d√¢y</a>.</p>

<p><strong>Ch√∫ √Ω:</strong> H√†m <a href="http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html">sklearn.linear_model.LogisticRegression</a> nh·∫≠n d·ªØ li·ªáu ·ªü d·∫°ng vector h√†ng.</p>

<p><a name="lam-viec-voi-python"></a></p>

<h3 id="l√†m-vi·ªác-v·ªõi-python">L√†m vi·ªác v·ªõi Python</h3>

<p>Khai b√°o th∆∞ vi·ªán</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span> 
<span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">linear_model</span>           <span class="c1"># for logistic regression
</span><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">accuracy_score</span> <span class="c1"># for evaluation
</span><span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">misc</span>                     <span class="c1"># for loading image
</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>                          <span class="c1"># for fixing random values
</span></code></pre></div></div>

<p>Ph√¢n chia training set v√† test set, l·ª±a ch·ªçn c√°c <em>views</em>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">path</span> <span class="o">=</span> <span class="s">'../data/AR/'</span> <span class="c1"># path to the database 
</span><span class="n">train_ids</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">26</span><span class="p">)</span>
<span class="n">test_ids</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">26</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
<span class="n">view_ids</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">21</span><span class="p">)))</span>
</code></pre></div></div>

<p>T·∫°o <em>random projection matrix</em>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">D</span> <span class="o">=</span> <span class="mi">165</span><span class="o">*</span><span class="mi">120</span> <span class="c1"># original dimension 
</span><span class="n">d</span> <span class="o">=</span> <span class="mi">500</span> <span class="c1"># new dimension 
</span>
<span class="c1"># generate the projection matrix 
</span><span class="n">ProjectionMatrix</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="n">D</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span> 
</code></pre></div></div>

<p>X√¢y d·ª±ng danh s√°ch c√°c t√™n files.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">build_list_fn</span><span class="p">(</span><span class="n">pre</span><span class="p">,</span> <span class="n">img_ids</span><span class="p">,</span> <span class="n">view_ids</span><span class="p">):</span>
    <span class="s">"""
    INPUT:
        pre = 'M-' or 'W-'
        img_ids: indexes of images
        view_ids: indexes of views
    OUTPUT:
        a list of filenames 
    """</span>
    <span class="n">list_fn</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">im_id</span> <span class="ow">in</span> <span class="n">img_ids</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">v_id</span> <span class="ow">in</span> <span class="n">view_ids</span><span class="p">:</span>
            <span class="n">fn</span> <span class="o">=</span> <span class="n">path</span> <span class="o">+</span> <span class="n">pre</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">im_id</span><span class="p">).</span><span class="n">zfill</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="s">'-'</span> <span class="o">+</span> \
                <span class="nb">str</span><span class="p">(</span><span class="n">v_id</span><span class="p">).</span><span class="n">zfill</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="s">'.bmp'</span>
            <span class="n">list_fn</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">list_fn</span> 
</code></pre></div></div>

<p><strong>Feature Extraction:</strong> X√¢y d·ª±ng d·ªØ li·ªáu cho training set v√† test set.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">rgb2gray</span><span class="p">(</span><span class="n">rgb</span><span class="p">):</span>
<span class="c1">#     Y' = 0.299 R + 0.587 G + 0.114 B 
</span>    <span class="k">return</span> <span class="n">rgb</span><span class="p">[:,:,</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">.</span><span class="mi">299</span> <span class="o">+</span> <span class="n">rgb</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="p">.</span><span class="mi">587</span> <span class="o">+</span> <span class="n">rgb</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="p">.</span><span class="mi">114</span>

<span class="c1"># feature extraction 
</span><span class="k">def</span> <span class="nf">vectorize_img</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>    
    <span class="c1"># load image 
</span>    <span class="n">rgb</span> <span class="o">=</span> <span class="n">misc</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
    <span class="c1"># convert to gray scale 
</span>    <span class="n">gray</span> <span class="o">=</span> <span class="n">rgb2gray</span><span class="p">(</span><span class="n">rgb</span><span class="p">)</span>
    <span class="c1"># vectorization each row is a data point 
</span>    <span class="n">im_vec</span> <span class="o">=</span> <span class="n">gray</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">D</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">im_vec</span> 

<span class="k">def</span> <span class="nf">build_data_matrix</span><span class="p">(</span><span class="n">img_ids</span><span class="p">,</span> <span class="n">view_ids</span><span class="p">):</span>
    <span class="n">total_imgs</span> <span class="o">=</span> <span class="n">img_ids</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">view_ids</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">2</span> 
        
    <span class="n">X_full</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">total_imgs</span><span class="p">,</span> <span class="n">D</span><span class="p">))</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">total_imgs</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="p">)),</span> <span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="n">total_imgs</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="p">))))</span>
    
    <span class="n">list_fn_m</span> <span class="o">=</span> <span class="n">build_list_fn</span><span class="p">(</span><span class="s">'M-'</span><span class="p">,</span> <span class="n">img_ids</span><span class="p">,</span> <span class="n">view_ids</span><span class="p">)</span>
    <span class="n">list_fn_w</span> <span class="o">=</span> <span class="n">build_list_fn</span><span class="p">(</span><span class="s">'W-'</span><span class="p">,</span> <span class="n">img_ids</span><span class="p">,</span> <span class="n">view_ids</span><span class="p">)</span>
    <span class="n">list_fn</span> <span class="o">=</span> <span class="n">list_fn_m</span> <span class="o">+</span> <span class="n">list_fn_w</span> 
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">list_fn</span><span class="p">)):</span>
        <span class="n">X_full</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="p">:]</span> <span class="o">=</span> <span class="n">vectorize_img</span><span class="p">(</span><span class="n">list_fn</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

    <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X_full</span><span class="p">,</span> <span class="n">ProjectionMatrix</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

<span class="p">(</span><span class="n">X_train_full</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span> <span class="o">=</span> <span class="n">build_data_matrix</span><span class="p">(</span><span class="n">train_ids</span><span class="p">,</span> <span class="n">view_ids</span><span class="p">)</span>
<span class="n">x_mean</span> <span class="o">=</span> <span class="n">X_train_full</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">x_var</span>  <span class="o">=</span> <span class="n">X_train_full</span><span class="p">.</span><span class="n">var</span><span class="p">(</span><span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">feature_extraction</span><span class="p">(</span><span class="n">X</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">X</span> <span class="o">-</span> <span class="n">x_mean</span><span class="p">)</span><span class="o">/</span><span class="n">x_var</span>     

<span class="n">X_train</span> <span class="o">=</span> <span class="n">feature_extraction</span><span class="p">(</span><span class="n">X_train_full</span><span class="p">)</span>
<span class="n">X_train_full</span> <span class="o">=</span> <span class="bp">None</span> <span class="c1">## free this variable 
</span>
<span class="p">(</span><span class="n">X_test_full</span><span class="p">,</span> <span class="n">y_test</span><span class="p">)</span> <span class="o">=</span> <span class="n">build_data_matrix</span><span class="p">(</span><span class="n">test_ids</span><span class="p">,</span> <span class="n">view_ids</span><span class="p">)</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="n">feature_extraction</span><span class="p">(</span><span class="n">X_test_full</span><span class="p">)</span>
<span class="n">X_test_full</span> <span class="o">=</span> <span class="bp">None</span> 
</code></pre></div></div>

<p><strong>Ch√∫ √Ω:</strong> Trong ƒëo·∫°n code tr√™n t√¥i c√≥ s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p chu·∫©n h√≥a d·ªØ li·ªáu <a href="/general/2017/02/06/featureengineering/#standardization">Standardization</a>. Trong ƒë√≥ <code class="language-plaintext highlighter-rouge">x_mean</code> v√† <code class="language-plaintext highlighter-rouge">x_var</code> l·∫ßn l∆∞·ª£t l√† vector k·ª≥ v·ªçng v√† ph∆∞∆°ng sai c·ªßa to√†n b·ªô d·ªØ li·ªáu training. <code class="language-plaintext highlighter-rouge">X_train_full</code>, <code class="language-plaintext highlighter-rouge">X_test_full</code> l√† c√°c ma tr·∫≠n d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c gi·∫£m s·ªë chi·ªÅu nh∆∞ng ch∆∞a ƒë∆∞·ª£c chu·∫©n h√≥a. H√†m <code class="language-plaintext highlighter-rouge">feature_extraction</code> gi√∫p chu·∫©n h√≥a d·ªØ li·ªáu d·ª±a v√†o <code class="language-plaintext highlighter-rouge">x_mean</code> v√† <code class="language-plaintext highlighter-rouge">x_var</code> c·ªßa <code class="language-plaintext highlighter-rouge">X_train_full</code>.</p>

<p>ƒêo·∫°n code d∆∞·ªõi ƒë√¢y th·ª±c hi·ªán thu·∫≠t to√°n Logistic Regression, d·ª± ƒëo√°n output c·ªßa test data v√† ƒë√°nh gi√° k·∫øt qu·∫£. M·ªôt ch√∫ √Ω nh·ªè, h√†m Logistic Regression trong th∆∞ vi·ªán sklearn c√≥ nhi·ªÅu bi·∫øn th·ªÉ kh√°c nhau. ƒê·ªÉ s·ª≠ d·ª•ng thu·∫≠t to√°n Logistic Regression <em>thu·∫ßn</em> m√† t√¥i ƒë√£ gi·ªõi thi·ªáu trong b√†i <a href="/2017/01/27/logisticregression/">Logistic Regression</a>, ch√∫ng ta c·∫ßn ƒë·∫∑t gi√° tr·ªã cho <code class="language-plaintext highlighter-rouge">C</code> l√† m·ªôt s·ªë l·ªõn (ƒë·ªÉ ngh·ªãch ƒë·∫£o c·ªßa n√≥ g·∫ßn v·ªõi 0. T·∫°m th·ªùi c√°c b·∫°n ch∆∞a c·∫ßn quan t√¢m t·ªõi ƒëi·ªÅu n√†y, ch·ªâ c·∫ßn ch·ªçn <code class="language-plaintext highlighter-rouge">C</code> l·ªõn l√† ƒë∆∞·ª£c).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">logreg</span> <span class="o">=</span> <span class="n">linear_model</span><span class="p">.</span><span class="n">LogisticRegression</span><span class="p">(</span><span class="n">C</span><span class="o">=</span><span class="mf">1e5</span><span class="p">)</span> <span class="c1"># just a big number 
</span><span class="n">logreg</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

<span class="n">y_pred</span> <span class="o">=</span> <span class="n">logreg</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="k">print</span> <span class="s">"Accuracy: %.2f %%"</span> <span class="o">%</span><span class="p">(</span><span class="mi">100</span><span class="o">*</span><span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Accuracy: 90.33 %
</code></pre></div></div>

<p>90.33%, t·ª©c l√† c·ª© 10 b·ª©c ·∫£nh trong test set th√¨ c√≥ trung b√¨nh h∆°n 9 b·ª©c ƒë∆∞·ª£c nh·∫≠n d·∫°ng ƒë√∫ng. Kh√¥ng t·ªá, nh·∫•t l√† khi ch√∫ng ta v·∫´n ch∆∞a ph·∫£i l√†m g√¨ nhi·ªÅu!</p>

<p>ƒê·ªÉ x√°c ƒë·ªãnh <em>nh√£n</em> c·ªßa m·ªôt ·∫£nh, ƒë·∫ßu ra c·ªßa h√†m <a href="/2017/01/27/logisticregression/#sigmoid-function">sigmoid</a> ƒë∆∞·ª£c so s√°nh v·ªõi 0.5. N·∫øu gi√° tr·ªã ƒë√≥ l·ªõn h∆°n 0.5, ta k·∫øt lu·∫≠n ƒë√≥ l√† ·∫£nh c·ªßa nam, ng∆∞·ª£c l·∫°i, ƒë√≥ l√† ·∫£nh c·ªßa n·ªØ. ƒê·ªÉ xem gi√° tr·ªã sau h√†m sigmoid (t·ª©c x√°c su·∫•t ƒë·ªÉ ·∫£nh ƒë√≥ l√† nam), ch√∫ng ta s·ª≠ d·ª•ng h√†m <code class="language-plaintext highlighter-rouge">predict_proba</code> nh∆∞ sau:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">feature_extraction_fn</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
    <span class="s">"""
    extract feature from filename
    """</span>
    <span class="c1"># vectorize
</span>    <span class="n">im</span> <span class="o">=</span> <span class="n">vectorize_img</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
    <span class="c1"># project
</span>    <span class="n">im1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">im</span><span class="p">,</span> <span class="n">ProjectionMatrix</span><span class="p">)</span>
    <span class="c1"># standardization 
</span>    <span class="k">return</span> <span class="n">feature_extraction</span><span class="p">(</span><span class="n">im1</span><span class="p">)</span>

<span class="n">fn1</span> <span class="o">=</span> <span class="n">path</span> <span class="o">+</span> <span class="s">'M-036-18.bmp'</span>
<span class="n">fn2</span> <span class="o">=</span> <span class="n">path</span> <span class="o">+</span> <span class="s">'W-045-01.bmp'</span>
<span class="n">fn3</span> <span class="o">=</span> <span class="n">path</span> <span class="o">+</span> <span class="s">'M-048-01.bmp'</span>
<span class="n">fn4</span> <span class="o">=</span> <span class="n">path</span> <span class="o">+</span> <span class="s">'W-027-02.bmp'</span>

<span class="n">x1</span> <span class="o">=</span> <span class="n">feature_extraction_fn</span><span class="p">(</span><span class="n">fn1</span><span class="p">)</span>
<span class="n">p1</span> <span class="o">=</span> <span class="n">logreg</span><span class="p">.</span><span class="n">predict_proba</span><span class="p">(</span><span class="n">x1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p1</span><span class="p">)</span>

<span class="n">x2</span> <span class="o">=</span> <span class="n">feature_extraction_fn</span><span class="p">(</span><span class="n">fn2</span><span class="p">)</span>
<span class="n">p2</span> <span class="o">=</span> <span class="n">logreg</span><span class="p">.</span><span class="n">predict_proba</span><span class="p">(</span><span class="n">x2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p2</span><span class="p">)</span>

<span class="n">x3</span> <span class="o">=</span> <span class="n">feature_extraction_fn</span><span class="p">(</span><span class="n">fn3</span><span class="p">)</span>
<span class="n">p3</span> <span class="o">=</span> <span class="n">logreg</span><span class="p">.</span><span class="n">predict_proba</span><span class="p">(</span><span class="n">x3</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p3</span><span class="p">)</span>

<span class="n">x4</span> <span class="o">=</span> <span class="n">feature_extraction_fn</span><span class="p">(</span><span class="n">fn4</span><span class="p">)</span>
<span class="n">p4</span> <span class="o">=</span> <span class="n">logreg</span><span class="p">.</span><span class="n">predict_proba</span><span class="p">(</span><span class="n">x4</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">p4</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[ 0.87940218  0.12059782]]
[[ 0.0172217  0.9827783]]
[[ 0.30458761  0.69541239]]
[[ 0.83989242  0.16010758]]
</code></pre></div></div>

<p>K·∫øt qu·∫£ thu ƒë∆∞·ª£c l√† x√°c su·∫•t ƒë·ªÉ b·ª©c ·∫£nh ƒë√≥ l√† ·∫£nh c·ªßa nam (c·ªôt th·ª© nh·∫•t) v√† c·ªßa n·ªØ (c·ªôt th·ª© hai). D∆∞·ªõi ƒë√¢y l√† h√¨nh minh h·ªça:</p>

<div class="imgcap">
<img src="\assets\LogReg2\ARgenderResult.png" align="center" width="800" />
<div class="thecap">H√¨nh 2: V√≠ d·ª• v·ªÅ k·∫øt qu·∫£ t√¨m ƒë∆∞·ª£c b·∫±ng Logistic Regression</div>
</div>

<p>H√†ng tr√™n g·ªìm c√°c h√¨nh ƒë∆∞·ª£c ph√¢n lo·∫°i ƒë√∫ng, h√†ng d∆∞·ªõi g·ªìm c√°c h√¨nh b·ªã ph√¢n lo·∫°i sai. C√≥ m·ªôt v√†i nh·∫≠n x√©t v·ªÅ h√†ng d∆∞·ªõi. T·ª´ hai b·ª©c ·∫£nh h√†ng d∆∞·ªõi, ch√∫ng ta c√≥ th·ªÉ ƒëo√°n r·∫±ng Logistic Regression quan t√¢m ƒë·∫øn t√≥c ph√≠a sau g√°y nhi·ªÅu h∆°n l√† r√¢u! Vi·ªác thu·∫≠t to√°n d·ª±a tr√™n nh·ªØng ƒë·∫∑c tr∆∞ng n√†o c·ªßa m·ªói class ph·ª• thu·ªôc r·∫•t nhi·ªÅu v√†o training data. N·∫øu trong training data, h·∫ßu h·∫øt nam kh√¥ng c√≥ r√¢u v√† h·∫ßu h·∫øt n·ªØ c√≥ t√≥c d√†i th√¨ k·∫øt qu·∫£ n√†y l√† c√≥ th·ªÉ l√Ω gi·∫£i ƒë∆∞·ª£c.</p>

<p><strong>Trong Machine Learning, thu·∫≠t to√°n l√† quan tr·ªçng, nh∆∞ng thu·∫≠t to√°n t·ªët m√† d·ªØ li·ªáu kh√¥ng t·ªët th√¨ s·∫Ω d·∫´n ƒë·∫øn nh·ªØng t√°c d·ª•ng ng∆∞·ª£c!</strong></p>

<p>(Source code cho v√≠ d·ª• n√†y c√≥ th·ªÉ t√¨m th·∫•y <a href="https://github.com/tiepvupsu/tiepvupsu.github.io/blob/master/assets/LogReg2/ARGender.ipynb">·ªü d√¢y</a>.)
<a name="-bai-toan-phan-biet-hai-chu-so-viet-tay"></a></p>

<h2 id="2-b√†i-to√°n-ph√¢n-bi·ªát-hai-ch·ªØ-s·ªë-vi·∫øt-tay">2. B√†i to√°n ph√¢n bi·ªát hai ch·ªØ s·ªë vi·∫øt tay</h2>
<p>Ch√∫ng ta c√πng sang v√≠ d·ª• th·ª© hai v·ªÅ ph√¢n bi·ªát hai ch·ªØ s·ªë trong <a href="/2017/01/04/kmeans2/#bo-co-so-du-lieu-mnist">b·ªô c∆° s·ªü d·ªØ li·ªáu MNIST</a>. C·ª• th·ªÉ, t√¥i s·∫Ω l√†m vi·ªác v·ªõi hai ch·ªØ s·ªë 0 v√† 1. B·∫°n ƒë·ªçc ho√†n to√†n c√≥ th·ªÉ th·ª≠ v·ªõi c√°c ch·ªØ s·ªë kh√°c b·∫±ng c√°ch thay ƒë·ªïi m·ªôt d√≤ng l·ªánh. Kh√°c v·ªõi AR Face, b·ªô d·ªØ li·ªáu n√†y c√≥ th·ªÉ d·ªÖ d√†ng ƒë∆∞·ª£c download v·ªÅ t·ª´ <a href="http://yann.lecun.com/exdb/mnist/">trang ch·ªß</a> c·ªßa n√≥.</p>

<p>Ch√∫ng ta c√≥ th·ªÉ b·∫Øt tay v√†o l√†m lu√¥n.</p>

<p>Khai b√°o th∆∞ vi·ªán:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># %reset
</span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span> 
<span class="kn">from</span> <span class="nn">mnist</span> <span class="kn">import</span> <span class="n">MNIST</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">linear_model</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">accuracy_score</span>
<span class="kn">from</span> <span class="nn">display_network</span> <span class="kn">import</span> <span class="o">*</span>
</code></pre></div></div>

<p>Load to√†n b·ªô d·ªØ li·ªáu:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mntrain</span> <span class="o">=</span> <span class="n">MNIST</span><span class="p">(</span><span class="s">'../MNIST/'</span><span class="p">)</span>
<span class="n">mntrain</span><span class="p">.</span><span class="n">load_training</span><span class="p">()</span>
<span class="n">Xtrain_all</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">mntrain</span><span class="p">.</span><span class="n">train_images</span><span class="p">)</span>
<span class="n">ytrain_all</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">mntrain</span><span class="p">.</span><span class="n">train_labels</span><span class="p">.</span><span class="n">tolist</span><span class="p">())</span>

<span class="n">mntest</span> <span class="o">=</span> <span class="n">MNIST</span><span class="p">(</span><span class="s">'../MNIST/'</span><span class="p">)</span>
<span class="n">mntest</span><span class="p">.</span><span class="n">load_testing</span><span class="p">()</span>
<span class="n">Xtest_all</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">mntest</span><span class="p">.</span><span class="n">test_images</span><span class="p">)</span>
<span class="n">ytest_all</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">mntest</span><span class="p">.</span><span class="n">test_labels</span><span class="p">.</span><span class="n">tolist</span><span class="p">())</span>
</code></pre></div></div>

<p>Sau b∆∞√≥c n√†y, to√†n b·ªô d·ªØ li·ªáu training data v√† test data ƒë∆∞·ª£c l∆∞u ·ªü hai ma tr·∫≠n <code class="language-plaintext highlighter-rouge">X_train_all</code> v√† <code class="language-plaintext highlighter-rouge">X_test_all</code>, m·ªói h√†ng c·ªßa c√°c ma tr·∫≠n n√†y ch·ª©a m·ªôt ƒëi·ªÉm d·ªØ li·ªáu, t·ª©c m·ªôt b·ª©c ·∫£nh ƒë√£ ƒë∆∞·ª£c <em>vector h√≥a</em>.</p>

<p>ƒê·ªÉ l·∫•y c√°c h√†ng t∆∞∆°ng ·ª©ng v·ªõi ch·ªØ s·ªë 0 v√† ch·ªØ s·ªë 1, ta khai b√°o bi·∫øn sau:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cls</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</code></pre></div></div>

<p>N·∫øu b·∫°n mu·ªën th·ª≠ v·ªõi c·∫∑p <code class="language-plaintext highlighter-rouge">3</code> v√† <code class="language-plaintext highlighter-rouge">4</code>, ch·ªâ c·∫ßn thay d√≤ng n√†y b·∫±ng <code class="language-plaintext highlighter-rouge">cls = [[3], [4]]</code>. N·∫øu b·∫°n mu·ªën ph√¢n lo·∫°i <code class="language-plaintext highlighter-rouge">(4, 7)</code> v√† <code class="language-plaintext highlighter-rouge">(5, 6)</code>, ch·ªâ c·∫ßn thay d√≤ng n√†y b·∫±ng <code class="language-plaintext highlighter-rouge">cls = [[4, 7], [5, 6]]</code>. C√°c c·∫∑p b·∫•t k·ª≥ kh√°c ƒë·ªÅu c√≥ th·ªÉ th·ª±c hi·ªán b·∫±ng c√°ch thay ch·ªâ m·ªôt d√≤ng n√†y.</p>

<p>ƒêo·∫°n code d∆∞·ªõi ƒë√¢y th·ª±c hi·ªán vi·ªác <em>extract</em> to√†n b·ªô d·ªØ li·ªáu cho c√°c ch·ªØ s·ªë <code class="language-plaintext highlighter-rouge">0</code> v√† <code class="language-plaintext highlighter-rouge">1</code> trong t·∫≠p training data v√† test data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">extract_data</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">classes</span><span class="p">):</span>
    <span class="s">"""
    X: numpy array, matrix of size (N, d), d is data dim
    y: numpy array, size (N, )
    cls: two lists of labels. For example: 
        cls = [[1, 4, 7], [5, 6, 8]]
    return:
        X: extracted data
        y: extracted label 
            (0 and 1, corresponding to two lists in cls)
    """</span>
    <span class="n">y_res_id</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([])</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">cls</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
        <span class="n">y_res_id</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">y_res_id</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="n">i</span><span class="p">)[</span><span class="mi">0</span><span class="p">]))</span>
    <span class="n">n0</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">y_res_id</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">cls</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
        <span class="n">y_res_id</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">y_res_id</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="n">i</span><span class="p">)[</span><span class="mi">0</span><span class="p">]))</span>
    <span class="n">n1</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">y_res_id</span><span class="p">)</span> <span class="o">-</span> <span class="n">n0</span> 

    <span class="n">y_res_id</span> <span class="o">=</span> <span class="n">y_res_id</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
    <span class="n">X_res</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="n">y_res_id</span><span class="p">,</span> <span class="p">:]</span><span class="o">/</span><span class="mf">255.0</span>
    <span class="n">y_res</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">n0</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">n1</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">X_res</span><span class="p">,</span> <span class="n">y_res</span><span class="p">)</span>


<span class="c1"># extract data for training 
</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span> <span class="o">=</span> <span class="n">extract_data</span><span class="p">(</span><span class="n">Xtrain_all</span><span class="p">,</span> <span class="n">ytrain_all</span><span class="p">,</span> <span class="n">cls</span><span class="p">)</span>

<span class="c1"># extract data for test 
</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">)</span> <span class="o">=</span> <span class="n">extract_data</span><span class="p">(</span><span class="n">Xtest_all</span><span class="p">,</span> <span class="n">ytest_all</span><span class="p">,</span> <span class="n">cls</span><span class="p">)</span>
</code></pre></div></div>

<p>V√¨ m·ªói ƒëi·ªÉm d·ªØ li·ªáu c√≥ s·ªë ph·∫ßn t·ª≠ l√† 784 (28x28), l√† m·ªôt s·ªë kh√° nh·ªè, n√™n ta kh√¥ng c·∫ßn th√™m b∆∞·ªõc gi·∫£m s·ªë chi·ªÅu d·ªØ li·ªáu n·ªØa. Tuy nhi√™n, t√¥i c√≥ th·ª±c hi·ªán th√™m m·ªôt b∆∞·ªõc chu·∫©n h√≥a ƒë·ªÉ ƒë∆∞a d·ªØ li·ªáu v·ªÅ ƒëo·∫°n <code class="language-plaintext highlighter-rouge">[0, 1]</code> b·∫±ng c√°ch chia to√†n b·ªô hai ma tr·∫≠n d·ªØ li·ªáu cho <code class="language-plaintext highlighter-rouge">255.0</code>.</p>

<p>T·ªõi ƒë√¢y ta c√≥ th·ªÉ <em>train</em> m√¥ h√¨nh Logistic Regression v√† ƒë√°nh gi√° m√¥ h√¨nh n√†y.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># train the logistic regression model 
</span><span class="n">logreg</span> <span class="o">=</span> <span class="n">linear_model</span><span class="p">.</span><span class="n">LogisticRegression</span><span class="p">(</span><span class="n">C</span><span class="o">=</span><span class="mf">1e5</span><span class="p">)</span> <span class="c1"># just a big number 
</span><span class="n">logreg</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

<span class="c1"># predict 
</span><span class="n">y_pred</span> <span class="o">=</span> <span class="n">logreg</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="k">print</span> <span class="s">"Accuracy: %.2f %%"</span> <span class="o">%</span><span class="p">(</span><span class="mi">100</span><span class="o">*</span><span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">.</span><span class="n">tolist</span><span class="p">()))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Accuracy: 99.95 %
</code></pre></div></div>

<p>Tuy·ªát v·ªùi, g·∫ßn nh∆∞ 100% ƒë∆∞·ª£c ph√¢n lo·∫°i ch√≠nh x√°c. ƒêi·ªÅu n√†y l√† d·ªÖ hi·ªÉu v√¨ hai ch·ªØ s·ªë 0 v√† 1 kh√°c nhau qu√° nhi·ªÅu. B·ªô c∆° s·ªü d·ªØ li·ªáu n√†y v·ªõi to√†n b·ªô 10 classes hi·ªán nay ƒë√£ ƒë∆∞·ª£c ph√¢n lo·∫°i v·ªõi ƒë·ªô ch√≠nh x√°c tr√™n 99.7%.</p>

<p>Ch√∫ng ta c√πng ƒëi t√¨m nh·ªØng ·∫£nh b·ªã ph√¢n lo·∫°i sai:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># display misclassified image(s)
</span><span class="n">mis</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">((</span><span class="n">y_pred</span> <span class="o">-</span> <span class="n">y_test</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">Xmis</span> <span class="o">=</span> <span class="n">X_test</span><span class="p">[</span><span class="n">mis</span><span class="p">,</span> <span class="p">:]</span>

<span class="n">plt</span><span class="p">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'off'</span><span class="p">)</span>
<span class="n">A</span> <span class="o">=</span> <span class="n">display_network</span><span class="p">(</span><span class="n">Xmis</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>
<span class="n">f2</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">'nearest'</span> <span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">gray</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<div class="imgcap">
<img src="\assets\LogReg2\0.png" align="center" width="100" />
<div class="thecap">H√¨nh 3: Ch·ªØ s·ªë b·ªã ph√¢n lo·∫°i sai trong b√†i to√°n ph√¢n lo·∫°i ·∫£nh ch·ªØ s·ªë 0 v√† 1</div>
</div>

<p>Nh∆∞ v·∫≠y l√† ch·ªâ c√≥ m·ªôt ·∫£nh b·ªã ph√¢n lo·∫°i sai. ·∫¢nh n√†y l√† ch·ªØ s·ªë 0 nh∆∞ng b·ªã misclassified th√†nh ch·ªØ s·ªë 1, c√≥ th·ªÉ v√¨ n√©t ƒë·∫≠m nh·∫•t c·ªßa n√≥ r·∫•t gi·ªëng v·ªõi ch·ªØ s·ªë 1.</p>

<p>Source code cho v√≠ d·ª• n√†y c√≥ th·ªÉ ƒë∆∞·ª£c t√¨m th·∫•y <a href="/assets/LogReg2/LogReg2.ipynb">·ªü ƒë√¢y</a>.</p>

<p><a name="-binary-classifiers-cho-multi-class-classification-problems"></a></p>

<h2 id="3-binary-classifiers-cho-multi-class-classification-problems">3. Binary Classifiers cho Multi-class Classification problems</h2>

<p>C√≥ l·∫Ω nhi·ªÅu b·∫°n ƒëang ƒë·∫∑t c√¢u h·ªèi: C√°c v√≠ d·ª• tr√™n ƒë√¢y ƒë·ªÅu l√†m v·ªõi b√†i to√°n c√≥ hai classes. V·∫≠y n·∫øu c√≥ nhi·ªÅu h∆°n hai classes, v√≠ d·ª• nh∆∞ 10 classes c·ªßa MNIST, th√¨ l√†m th·∫ø n√†o?</p>

<p>C√≥ nhi·ªÅu thu·∫≠t to√°n kh√°c ƒë∆∞·ª£c x√¢y d·ª±ng ri√™ng cho c√°c b√†i to√°n v·ªõi nhi·ªÅu classes (multi-class classification problems), t√¥i s·∫Ω gi·ªõi thi·ªáu sau. C√≤n b√¢y gi·ªù, ch√∫ng ta v·∫´n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c <em>binary classifiers</em> ƒë·ªÉ th·ª±c hi·ªán c√¥ng vi·ªác n√†y, v·ªõi m·ªôt ch√∫t thay ƒë·ªïi. 
<!-- ƒê·ªÉ ti·ªán cho vi·ªác di·ªÖn gi·∫£i, t√¥i s·ª≠ d·ª•ng MNIST l√†m v√≠ d·ª•. C√°c c∆° s·ªü d·ªØ li·ªáu kh√°c ƒë∆∞·ª£c suy ra m·ªôt c√°ch t∆∞∆°ng t·ª±. --></p>

<p>C√≥ <em>√≠t nh·∫•t</em> b·ªën c√°ch ƒë·ªÉ √°p d·ª•ng <em>binary classifiers</em> v√†o c√°c b√†i to√°n multi-class classification:</p>

<p><a name="one-vs-one"></a></p>

<h3 id="one-vs-one">One-vs-one</h3>

<p>X√¢y d·ª±ng r·∫•t nhi·ªÅu b·ªô binary classifiers cho t·ª´ng c·∫∑p classes. B·ªô th·ª© nh·∫•t ph√¢n bi·ªát class 1 v√† class 2, b·ªô th·ª© hai ph√¢n bi·ªát class 1 v√† class 3, ‚Ä¶ Khi c√≥ m·ªôt d·ªØ li·ªáu m·ªõi v√†o, ƒë∆∞a n√≥ v√†o to√†n b·ªô c√°c b·ªô binary classifiers tr√™n. K·∫øt qu·∫£ cu·ªëi c√πng c√≥ th·ªÉ ƒë∆∞·ª£c x√°c ƒë·ªãnh b·∫±ng c√°ch xem class n√†o m√† ƒëi·ªÉm d·ªØ li·ªáu ƒë√≥ ƒë∆∞·ª£c ph√¢n v√†o nhi·ªÅu nh·∫•t (major voting). Ho·∫∑c v·ªõi Logistic Regression th√¨ ta c√≥ th·ªÉ t√≠nh <em>t·ªïng c√°c x√°c su·∫•t</em> t√¨m ƒë∆∞·ª£c sau m·ªói b·ªô binary classifier.</p>

<p>Nh∆∞ v·∫≠y, n·∫øu c√≥ \(C\) classes th√¨ t·ªïng s·ªë binary classifiers ph·∫£i d√πng l√† \(\frac{n(n-1)}{2}\). ƒê√¢y l√† m·ªôt con s·ªë l·ªõn, c√°ch l√†m n√†y kh√¥ng l·ª£i v·ªÅ t√≠nh to√°n. H∆°n n·ªØa, n·∫øu m·ªôt ch·ªØ s·ªë th·ª±c ra l√† ch·ªØ s·ªë <code class="language-plaintext highlighter-rouge">1</code>, nh∆∞ng l·∫°i ƒë∆∞·ª£c ƒë∆∞a v√†o b·ªô ph√¢n l·ªõp gi·ªØa c√°c ch·ªØ s·ªë <code class="language-plaintext highlighter-rouge">5</code> v√† <code class="language-plaintext highlighter-rouge">6</code>, th√¨ c·∫£ hai kh·∫£ nƒÉng t√¨m ƒë∆∞·ª£c (l√† <code class="language-plaintext highlighter-rouge">5</code> ho·∫∑c <code class="language-plaintext highlighter-rouge">6</code>) ƒë·ªÅu kh√¥ng h·ª£p l√Ω!</p>

<p><a name="hierarchical-phan-tang"></a></p>

<h3 id="hierarchical-ph√¢n-t·∫ßng">Hierarchical (ph√¢n t·∫ßng)</h3>
<p>C√°c l√†m nh∆∞ <strong>one-vs-one</strong> s·∫Ω m·∫•t r·∫•t nhi·ªÅu th·ªùi gian training v√¨ c√≥ qu√° nhi·ªÅu b·ªô ph√¢n l·ªõp c·∫ßn ƒë∆∞·ª£c x√¢y d·ª±ng. M·ªôt c√°ch kh√°c gi√∫p <em>ti·∫øt ki·ªám</em> s·ªë binary classifiers h∆°n ƒë√≥ l√† <strong>hierarchical</strong>. √ù t∆∞·ªüng nh∆∞ sau:</p>

<p>V√≠ d·ª• v·ªõi MNIST v·ªõi 4 ch·ªØ s·ªë <code class="language-plaintext highlighter-rouge">4, 5, 6, 7</code>. V√¨ ta th·∫•y ch·ªØ s·ªë <code class="language-plaintext highlighter-rouge">4</code> v√† <code class="language-plaintext highlighter-rouge">7</code> kh√° gi·ªëng nhau, ch·ªØ s·ªë <code class="language-plaintext highlighter-rouge">5</code> v√† <code class="language-plaintext highlighter-rouge">6</code> kh√° gi·ªëng nhau n√™n tr∆∞·ªõc ti√™n ch√∫ng ta x√¢y d·ª±ng b·ªô ph√¢n l·ªõp <code class="language-plaintext highlighter-rouge">[4, 7] vs [5, 6]</code>. Sau ƒë√≥ x√¢y d·ª±ng th√™m hai b·ªô <code class="language-plaintext highlighter-rouge">4 vs  7</code> v√† <code class="language-plaintext highlighter-rouge">5 vs 6</code> n·ªØa. T·ªïng c·ªông, ta c·∫ßn 3 b·ªô binary classifiers. Ch√∫ √Ω r·∫±ng c√≥ nhi·ªÅu c√°ch chia kh√°c nhau, v√≠ d·ª• <code class="language-plaintext highlighter-rouge">[4, 5, 6] vs 7</code>, <code class="language-plaintext highlighter-rouge">[4, 5] vs 6</code>, r·ªìi <code class="language-plaintext highlighter-rouge">4 vs 5</code>.</p>

<p>∆Øu ƒëi·ªÉm c·ªßa ph∆∞∆°ng ph√°p n√†y l√† s·ª≠ d·ª•ng √≠t b·ªô binary classifiers h∆°n <strong>one-vs-one</strong>. 
H·∫°n ch·∫ø l·ªõn nh·∫•t c·ªßa n√≥ l√† vi·ªác n·∫øu ch·ªâ m·ªôt binary classifier cho k·∫øt qu·∫£ sai th√¨ k·∫øt qu·∫£ cu·ªëi c√πng ch·∫Øc ch·∫Øn s·∫Ω sai. V√≠ d·ª•, n·∫øu 1 ·∫£nh ch·ª©a ch·ªØ s·ªë <code class="language-plaintext highlighter-rouge">5</code>, nh∆∞ng ngay b∆∞·ªõc ƒë·∫ßu ti√™n ƒë√£ b·ªã misclassifed sang nh√°nh <code class="language-plaintext highlighter-rouge">[4, 7]</code> th√¨ k·∫øt qu·∫£ cu·ªëi c√πng s·∫Ω l√† <code class="language-plaintext highlighter-rouge">4</code> ho·∫∑c <code class="language-plaintext highlighter-rouge">7</code>, c·∫£ hai ƒë·ªÅu sai.</p>

<p><a name="binary-coding"></a></p>

<h3 id="binary-coding">Binary coding</h3>
<p>C√≥ m·ªôt c√°ch gi·∫£m s·ªë binary classifiers h∆°n n·ªØa l√† <strong>binary coding</strong>, t·ª©c <em>m√£ h√≥a</em> output c·ªßa m·ªói class b·∫±ng m·ªôt s·ªë nh·ªã ph√¢n. V√≠ d·ª•, n·∫øu c√≥ 4 classes th√¨ class th·ª© nh·∫•t ƒë∆∞·ª£c m√£ h√≥a l√† <code class="language-plaintext highlighter-rouge">00</code>, ba class kia ƒë∆∞·ª£c m√£ h√≥a l·∫ßn l∆∞·ª£t l√† <code class="language-plaintext highlighter-rouge">01, 10</code> v√† <code class="language-plaintext highlighter-rouge">11</code>. V·ªõi c√°ch l√†m n√†y, s·ªë b·ªô binary classifiers ph·∫£i th·ª±c hi·ªán ch·ªâ l√† \(m = \left\lceil\log_2(C)\right\rceil\) trong ƒë√≥ \(C\) l√† s·ªë l∆∞·ª£ng class, \(\left\lceil a \right\rceil\) l√† <em>s·ªë nguy√™n nh·ªè nh·∫•t kh√¥ng nh·ªè h∆°n</em> \(a\). Class th·ª© nh·∫•t s·∫Ω ƒëi t√¨m bit ƒë·∫ßu ti√™n c·ªßa output (ƒë√£ ƒë∆∞·ª£c m√£ h√≥a nh·ªã ph√¢n), class th·ª© hai s·∫Ω ƒëi t√¨m bit th·ª© hai, ‚Ä¶</p>

<p>C√°ch l√†m n√†y s·ª≠ d·ª•ng m·ªôt s·ªë l∆∞·ª£ng nh·ªè nh·∫•t c√°c b·ªô <em>binary classifiers</em>. Nh∆∞ng n√≥ c√≥ m·ªôt h·∫°n ch·∫ø r·∫•t l·ªõn l√† ch·ªâ c·∫ßn m·ªôt bit b·ªã ph√¢n lo·∫°i sai s·∫Ω d·∫´n ƒë·∫øn d·ªØ li·ªáu b·ªã ph√¢n lo·∫°i sai. H∆°n n·ªØa, n·∫øu s·ªë classes kh√¥ng ph·∫£i l√† l≈©y th·ª´a c·ªßa hai, m√£ nh·ªã ph√¢n nh·∫≠n ƒë∆∞·ª£c c√≥ th·ªÉ l√† m·ªôt gi√° tr·ªã kh√¥ng t∆∞∆°ng ·ª©ng v·ªõi class n√†o!</p>

<p><a name="one-vs-rest-hay-one-hot-coding"></a></p>

<h3 id="one-vs-rest-hay-one-hot-coding">one-vs-rest hay one-hot coding</h3>
<p>Ph∆∞∆°ng ph√°p ƒë∆∞·ª£c s·ª≠ d·ª•ng nhi·ªÅu nh·∫•t l√† <strong>one-vs-rest</strong> (m·ªôt s·ªë t√†i li·ªáu g·ªçi l√† <strong>ove-vs-all</strong>, <strong>one-against-rest</strong>, ho·∫∑c <strong>one-against-all</strong>) . C·ª• th·ªÉ, n·∫øu c√≥ \(C\) classes th√¨ ta s·∫Ω x√¢y d·ª±ng \(C\) classifiers, m·ªói classifier t∆∞∆°ng ·ª©ng v·ªõi m·ªôt class. Classifier th·ª© nh·∫•t gi√∫p ph√¢n bi·ªát <code class="language-plaintext highlighter-rouge">class 1</code> vs <code class="language-plaintext highlighter-rouge">not class 1</code>, t·ª©c xem m·ªôt ƒëi·ªÉm c√≥ thu·ªôc class 1 hay kh√¥ng, ho·∫∑c x√°c su·∫•t ƒë·ªÉ m·ªôt ƒëi·ªÉm r∆°i v√†o class 1 l√† bao nhi√™u. T∆∞∆°ng t·ª± nh∆∞ th·∫ø, classifier th·ª© hai s·∫Ω ph√¢n bi·ªát <code class="language-plaintext highlighter-rouge">class 2</code> vs <code class="language-plaintext highlighter-rouge">not class 2</code>, ‚Ä¶ K·∫øt qu·∫£ cu·ªëi c√πng c√≥ th·ªÉ ƒë∆∞·ª£c x√°c ƒë·ªãnh b·∫±ng c√°ch x√°c ƒë·ªãnh class m√† m·ªôt ƒëi·ªÉm r∆°i v√†o v·ªõi x√°c su·∫•t cao nh·∫•t.</p>

<p>Ph∆∞∆°ng ph√°p n√†y c√≤n ƒë∆∞·ª£c g·ªçi l√† <strong>one-hot coding</strong> (ƒë∆∞·ª£c s·ª≠ d·ª•ng nhi·ªÅu n√™n c√≥ r·∫•t nhi·ªÅu t√™n) v√¨ v·ªõi c√°ch m√£ h√≥a tr√™n, gi·∫£ s·ª≠ c√≥ 4 classes, class 1, 2, 3, 4 s·∫Ω l·∫ßn l∆∞·ª£t ƒë∆∞·ª£c m√£ h√≥a d∆∞·ªõi d·∫°ng nh·ªã ph√¢n b·ªüi <code class="language-plaintext highlighter-rouge">1000, 0100, 0010</code> ho·∫∑c <code class="language-plaintext highlighter-rouge">0001</code>. One-hot v√¨ ch·ªâ c√≥ <em>one</em> bit l√† <em>hot</em> (b·∫±ng <code class="language-plaintext highlighter-rouge">1</code>).</p>

<p>H√†m Logistic Regression trong th∆∞ vi·ªán sklearn c√≥ th·ªÉ ƒë∆∞·ª£c d√πng tr·ª±c ti·∫øp ƒë·ªÉ √°p d·ª•ng v√†o c√°c b√†i to√°n multi-class classification v·ªõi ph∆∞∆°ng ph√°p <strong>one-vs-rest</strong>. V·ªõi b√†i to√°n MNIST nh∆∞ n√™u ·ªü ph·∫ßn 2, ta c√≥ th·ªÉ th√™m ba d√≤ng l·ªánh sau ƒë·ªÉ ch·∫°y tr√™n to√†n b·ªô 10 classes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>logreg.fit(Xtrain_all, ytrain_all)
y_pred = logreg.predict(Xtest_all)
print "Accuracy: %.2f %%" %(100*accuracy_score(ytest_all, y_pred.tolist()))
</code></pre></div></div>

<p>K·∫øt qu·∫£ thu ƒë∆∞·ª£c kho·∫£ng 91% sau h∆°n 20 ph√∫t ch·∫°y (t√πy thu·ªôc v√†o m√°y). ƒê√¢y v·∫´n l√† m·ªôt k·∫øt qu·∫£ qu√° th·∫•p so v·ªõi con s·ªë 99.7%. Th·∫≠m ch√≠ ph∆∞∆°ng ph√°p h·ªçc m√°y <em>kh√¥ng h·ªçc g√¨</em> nh∆∞ <a href="/2017/01/08/knn/#try-this-yourself">K-neareast neighbors c≈©ng ƒë√£ ƒë·∫°t h∆°n 96%</a> v·ªõi th·ªùi gian ch·∫°y ng·∫Øn h∆°n m·ªôt ch√∫t.</p>

<p>M·ªôt ch√∫ √Ω nh·ªè: ph∆∞∆°ng ph√°p m·∫∑c ƒë·ªãnh cho c√°c b√†i to√°n multi-class c·ªßa h√†m n√†y ƒë∆∞·ª£c x√°c ƒë·ªãnh b·ªüi bi·∫øn <code class="language-plaintext highlighter-rouge">multi_class</code>. C√≥ hai l·ª±a ch·ªçn cho bi·∫øn n√†y, trong ƒë√≥ l·ª±a ch·ªçn m·∫∑c ƒë·ªãnh l√† <code class="language-plaintext highlighter-rouge">ovr</code> t·ª©c <strong>one-vs-rest</strong>, l·ª±a ch·ªçn c√≤n l·∫°i s·∫Ω ƒë∆∞·ª£c t√¥i ƒë·ªÅ c·∫≠p trong m·ªôt b√†i g·∫ßn ƒë√¢y. L·ª±a ch·ªçn th·ª© hai kh√¥ng ph·∫£i cho binary classifiers n√™n t√¥i kh√¥ng ƒë·ªÅ c·∫≠p trong b√†i n√†y, c√≥ th·ªÉ sau m·ªôt v√†i b√†i n·ªØa (Xem th√™m <a href="http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html"><code class="language-plaintext highlighter-rouge">sklearn.linear_model.LogisticRegression</code></a>)</p>

<p><a name="-thao-luan"></a></p>

<h2 id="4-th·∫£o-lu·∫≠n">4. Th·∫£o lu·∫≠n</h2>
<p><a name="ket-hop-cac-phuong-phap-tren"></a></p>

<h3 id="k·∫øt-h·ª£p-c√°c-ph∆∞∆°ng-ph√°p-tr√™n">K·∫øt h·ª£p c√°c ph∆∞∆°ng ph√°p tr√™n</h3>

<p>Nh·∫Øc l·∫°i r·∫±ng c√°c linear binary classifiers t√¥i ƒë√£ tr√¨nh b√†y y√™u c·∫ßu d·ªØ li·ªáu l√† <em>linearly separable</em> ho·∫∑c <em>nearly linearly separable</em>. Ta c≈©ng c√≥ th·ªÉ m·ªü r·ªông ƒë·ªãnh nghƒ©a n√†y cho c√°c b√†i to√°n multi-class. N·∫øu hai class b·∫•t k·ª≥ l√† <em>linearly separable</em> th√¨ ta coi d·ªØ li·ªáu ƒë√≥ l√† <em>linearly separable</em>.</p>

<p>Th·∫ø nh∆∞ng, c√≥ nh·ªØng lo·∫°i d·ªØ li·ªáu <em>linearly separable</em> m√† ch·ªâ m·ªôt s·ªë trong 4 ph∆∞∆°ng ph√°p tr√™n ƒë√¢y l√† ph√π h·ª£p, ho·∫∑c c√≥ nh·ªØng lo·∫°i d·ªØ li·ªáu y√™u c·∫ßu ph·∫£i k·∫øt h·ª£p nhi·ªÅu ph∆∞∆°ng ph√°p m·ªõi th·ª±c hi·ªán ƒë∆∞·ª£c. X√©t ba v√≠ d·ª• sau:</p>

<div class="imgcap">
<img src="\assets\LogReg2\dist.png" align="center" width="800" />
<div class="thecap">H√¨nh 4: M·ªôt s·ªë v√≠ d·ª• v·ªÅ ph√¢n ph·ªëi c·ªßa c√°c classes trong b√†i to√†n multi-class</div>
</div>

<ul>
  <li>
    <p>H√¨nh 4a): c·∫£ 4 ph∆∞∆°ng ph√°p tr√™n ƒë√¢y ƒë·ªÅu c√≥ th·ªÉ √°p d·ª•ng ƒë∆∞·ª£c.</p>
  </li>
  <li>
    <p>H√¨nh 4b): one-vs-rest kh√¥ng ph√π h·ª£p v√¨ class m√†u xanh l·ª•c v√† class <em>rest</em> (h·ª£p c·ªßa xanh lam v√† ƒë·ªè) l√† kh√¥ng <em>linearly separable</em>. L√∫c n√†y, one-vs-one ho·∫∑c hierarchical ph√π h·ª£p h∆°n.</p>
  </li>
  <li>
    <p>H√¨nh 4c): T∆∞∆°ng t·ª± nh∆∞ tr√™n, ba class lam, l·ª•c, ƒë·ªè th·∫≥ng h√†ng n√™n s·∫Ω kh√¥ng d√πng ƒë∆∞·ª£c one-vs-r√©t. one-vs-one v·∫´n l√†m vi·ªác v√¨ t·ª´ng ƒë√¥i class m·ªôt l√† <em>linearly separable</em>. T∆∞∆°ng t·ª± hierarchical c≈©ng l√†m vi·ªác n·∫øu ta ph√¢n chia c√°c nh√≥m m·ªôt c√°ch h·ª£p l√Ω. Ho·∫∑c ch√∫ng ta c√≥ th·ªÉ k·∫øt h·ª£p nhi·ªÅu ph∆∞∆°ng ph√°p. V√≠ d·ª•: d√πng one-vs-rest ƒë·ªÉ t√¨m <em>ƒë·ªè</em> vs <em>kh√¥ng ƒë·ªè</em>. N·∫øu m·ªôt ƒëi·ªÉm d·ªØ li·ªáu l√† <em>kh√¥ng ƒë·ªè</em>, v·ªõi 3 class c√≤n l·∫°i, ch√∫ng ta l·∫°i quay l·∫°i tr∆∞·ªùng h·ª£p H√¨nh 4a) v√† c√≥ th·ªÉ d√πng c√°c ph∆∞∆°ng ph√°p kh√°c. Nh∆∞ng kh√≥ khƒÉn v·∫´n n·∫±m ·ªü vi·ªác ph√¢n nh√≥m nh∆∞ th·∫ø n√†o, li·ªáu r·∫±ng nh·ªØng class n√†o c√≥ th·ªÉ cho v√†o c√πng m·ªôt nh√≥m? V·ªõi nh·ªØng d·ªØ li·ªáu ƒë∆°n gi·∫£n, <a href="/2017/01/01/kmeans/">K-means clustering</a> c√≥ th·ªÉ l√† m·ªôt gi·∫£i ph√°p!</p>
  </li>
</ul>

<p>B·∫°n ƒë·ªçc c√≥ th·ªÉ xem th√™m v√≠ d·ª• √°p d·ª•ng Logistic Regression cho c∆° s·ªü d·ªØ li·ªáu <a href="/2017/01/08/knn/#bo-co-so-du-lieu-iris-iris-flower-dataset">Iris</a> trong <a href="http://scikit-learn.org/stable/auto_examples/linear_model/plot_iris_logistic.html">link n√†y</a>
<a name="-thao-luan"></a></p>

<div class="imgcap">
<img src="http://scikit-learn.org/stable/_images/sphx_glr_plot_iris_logistic_001.png" align="center" width="500" />
<div class="thecap">H√¨nh 5: Logistic Regression v·ªõi Iris database. (Ngu·ªìn: <a href="http://scikit-learn.org/stable/auto_examples/linear_model/plot_iris_logistic.html">Logistic Regression 3-class Classifier</a>)</div>
</div>

<p><a name="bieu-dien-duoi-dang-neural-networks"></a></p>

<h3 id="bi·ªÉu-di·ªÖn-d∆∞·ªõi-d·∫°ng-neural-networks">Bi·ªÉu di·ªÖn d∆∞·ªõi d·∫°ng Neural Networks</h3>
<p>L·∫•y v√≠ d·ª• v·ªõi b√†i to√°n c√≥ 4 classes 1, 2, 3, 4; ta c√≥ th·ªÉ bi·ªÉu di·ªÖn c√°c m√¥ h√¨nh ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong ph·∫ßn 3 d∆∞·ªõi d·∫°ng sau ƒë√¢y (gi·∫£ s·ª≠ input c√≥ s·ªë chi·ªÅu l√† 7 v√† node output m√†u ƒë·ªè bi·ªÉu di·ªÖn chung cho c·∫£ PLA, Logistic Regression v√† c√°c networks v·ªõi activation function kh√°c):</p>

<div class="imgcap">
<img src="\assets\LogReg2\binaryclassifiers.png" align="center" width="800" />
<div class="thecap">H√¨nh 6: M√¥ h√¨nh neural networks cho c√°c ph∆∞∆°ng ph√°p ƒë·ªÅ c·∫≠p trong b√†i</div>
</div>

<p>L√∫c n√†y, thay v√¨ ch·ªâ c√≥ 1 node output nh∆∞ <a href="/2017/01/27/logisticregression/#-thao-luan">c√°c ph∆∞∆°ng ph√°p t√¥i ƒë·ªÅ c·∫≠p tr∆∞·ªõc ƒë√¢y</a> (Linear Regression, Perceptron Learning Algorithm, Logistic Regression), ch√∫ng ta th·∫•y r·∫±ng c√°c networks n√†y ƒë·ªÅu c√≥ nhi·ªÅu outputs. V√† m·ªôt vector tr·ªçng s·ªë \(\mathbf{w}\) b√¢y gi·ªù ƒë√£ tr·ªü th√†nh <em>ma tr·∫≠n tr·ªçng s·ªë</em> \(\mathbf{W}\) m√† m·ªói c·ªôt c·ªßa n√≥ t∆∞∆°ng ·ª©ng v·ªõi vector tr·ªçng s·ªë c·ªßa m·ªôt node output. Vi·ªác t·ªëi ∆∞u ƒë·ªìng th·ªùi c√°c binary classifiers trong m·ªói network c≈©ng ƒë∆∞·ª£c t·ªïng qu√°t l√™n nh·ªõ c√°c ph√©p t√≠nh v·ªõi ma tr·∫≠n.</p>

<p>L·∫•y v√≠ d·ª• v·ªõi c√¥ng th·ª©c c·∫≠p nh·∫≠t c·ªßa <a href="/2017/01/27/logisticregression/#cong-thuc-cap-nhat-cho-logistic-sigmoid-regression">logistic sigmoid regression </a>:</p>

<p>\[
\mathbf{w} = \mathbf{w} + \eta(y_i - z_i)\mathbf{x}_i
\]</p>

<p>C√≥ th·ªÉ t·ªïng qu√°t th√†nh:
\[
\mathbf{W} = \mathbf{W} + \eta\mathbf{x}_i(\mathbf{y}_i - \mathbf{z}_i)^T
\]</p>

<p>V·ªõi \(\mathbf{W}, \mathbf{y}_i, \mathbf{z}_i\) l·∫ßn l∆∞·ª£t l√† ma tr·∫≠n tr·ªçng s·ªë, vector (c·ªôt) output <em>th·∫≠t</em> v·ªõi to√†n b·ªô c√°c binary classifiers t∆∞∆°ng ·ª©ng v·ªõi ƒëi·ªÉm d·ªØ li·ªáu \(\mathbf{x}_i\), v√† vector output t√¨m ƒë∆∞·ª£c c·ªßa networks t·∫°i th·ªùi ƒëi·ªÉm ƒëang x√©t n·∫øu ƒë·∫ßu v√†o m·ªói network l√† \(\mathbf{x}_i\). Ch√∫ √Ω r·∫±ng v·ªõi Logistic Regression, vector \(\mathbf{y}_i\) l√† m·ªôt binary vector, vector \(\mathbf{z}_i\) g·ªìm c√°c ph·∫ßn t·ª≠ n·∫±m trong kho·∫£ng \((0, 1)\).</p>

<p><a name="han-che-cua-one-vs-rest"></a></p>

<h3 id="h·∫°n-ch·∫ø-c·ªßa-one-vs-rest">H·∫°n ch·∫ø c·ªßa one-vs-rest</h3>
<p>Xem x√©t l·∫°i ph∆∞∆°ng ph√°p one-vs-rest theo g√≥c nh√¨n x√°c su·∫•t, m·ªôt ƒëi·ªÉm d·ªØ li·ªáu c√≥ th·ªÉ ƒë∆∞·ª£c d·ª± ƒëo√°n thu·ªôc v√†o class \(1, 2, \dots, C\) v·ªõi x√°c su·∫•t l·∫ßn l∆∞·ª£t l√† \(p_1, p_2, \dots, p_C\). Tuy nhi√™n, t·ªïng c√°c x√°c su·∫•t n√†y c√≥ th·ªÉ kh√¥ng b·∫±ng 1! C√≥ m·ªôt ph∆∞∆°ng ph√°p c√≥ th·ªÉ l√†m cho n√≥ <em>h·ª£p l√Ω h∆°n</em>, t·ª©c <em>√©p</em> t·ªïng c√°c x√°c su·∫•t n√†y b·∫±ng 1. Khi ƒë√≥, v·ªõi 1 ƒëi·ªÉm d·ªØ li·ªáu ta c√≥ th·ªÉ n√≥i x√°c su·∫•t n√≥ r∆°i v√†o m·ªói class l√† bao nhi√™u. Ph∆∞∆°ng ph√°p h·∫•p d·∫´n n√†y s·∫Ω ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong b√†i <a href="/2017/02/16/softmax/">Softmax Regression</a>. M·ªùi b·∫°n ƒë√≥n ƒë·ªçc.</p>

<p><a name="-tai-lieu-tham-khao"></a></p>

<h2 id="5-t√†i-li·ªáu-tham-kh·∫£o">5. T√†i li·ªáu tham kh·∫£o</h2>

<p>[1] <a href="https://en.wikipedia.org/wiki/Multiclass_classification">Multiclass classification - wiki</a></p>

<p>[2] <a href="http://scikit-learn.org/stable/auto_examples/linear_model/plot_iris_logistic.html">Logistic Regression 3-class Classifier</a></p>
:ET