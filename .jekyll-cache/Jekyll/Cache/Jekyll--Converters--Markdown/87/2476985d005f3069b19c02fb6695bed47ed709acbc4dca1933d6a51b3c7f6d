I"´<p><strong>Trong trang n√†y:</strong>
<!-- MarkdownTOC --></p>

<ul>
  <li><a href="#-gioi-thieu">1. Gi·ªõi thi·ªáu</a></li>
  <li><a href="#-xay-dung-va-toi-uu-ham-mat-mat">2. X√¢y d·ª±ng v√† t·ªëi ∆∞u h√†m m·∫•t m√°t</a>
    <ul>
      <li><a href="#-ham-mat-mat">2.1. H√†m m·∫•t m√°t</a></li>
      <li><a href="#-toi-uu-ham-mat-mat">2.2. T·ªëi ∆∞u h√†m m·∫•t m√°t</a></li>
    </ul>
  </li>
  <li><a href="#-lap-trinh-python">3. L·∫≠p tr√¨nh Python</a>
    <ul>
      <li><a href="#-class-mf">3.1.<code class="language-plaintext highlighter-rouge">class MF</code></a></li>
      <li><a href="#-ap-dung-len-movielens-k">3.2. √Åp d·ª•ng l√™n MovieLens 100k</a></li>
      <li><a href="#-ap-dung-len-movielens-m">3.3. √Åp d·ª•ng l√™n MovieLens 1M</a></li>
    </ul>
  </li>
  <li><a href="#-thao-luan">4. Th·∫£o lu·∫≠n</a>
    <ul>
      <li><a href="#-khi-co-bias">4.1. Khi c√≥ bias</a></li>
      <li><a href="#-nonnegative-matrix-factorization">4.2. Nonnegative Matrix Factorization</a></li>
      <li><a href="#-incremental-matrix-factorization">4.3. Incremental Matrix Factorization</a></li>
      <li><a href="#-others">4.4. Others</a></li>
    </ul>
  </li>
  <li><a href="#-tai-lieu-tham-khao">5. T√†i li·ªáu tham kh·∫£o</a></li>
</ul>

<!-- /MarkdownTOC -->

<p><a name="-gioi-thieu"></a></p>

<h2 id="1-gi·ªõi-thi·ªáu">1. Gi·ªõi thi·ªáu</h2>
<p>Trong <a href="/2017/05/24/collaborativefiltering/">B√†i 24</a>, ch√∫ng ta ƒë√£ l√†m quen v·ªõi m·ªôt h∆∞·ªõng ti·∫øp c·∫≠n trong Collaborative Filtering d·ª±a tr√™n h√†nh vi c·ªßa c√°c <em>users</em> ho·∫∑c <em>items</em> l√¢n c·∫≠n c√≥ t√™n l√† Neighborhood-based Collaborative Filtering. Trong b√†i vi·∫øt n√†y, ch√∫ng ta s·∫Ω l√†m quen v·ªõi m·ªôt h∆∞·ªõng ti·∫øp c·∫≠n kh√°c cho Collaborative Filtering d·ª±a tr√™n <em>Matrix Factorization</em> (ho·∫∑c <em>Matrix Decomposition</em>), t·ª©c <em>Ph√¢n t√≠ch ma tr·∫≠n th√†nh nh√¢n t·ª≠</em>.</p>

<p>Nh·∫Øc l·∫°i r·∫±ng trong <a href="/2017/05/17/contentbasedrecommendersys/">Content-based Recommendation Systems</a>, m·ªói <em>item</em> ƒë∆∞·ª£c m√¥ t·∫£ b·∫±ng m·ªôt vector \(\mathbf{x}\) ƒë∆∞·ª£c g·ªçi l√† <em>item profile</em>. Trong ph∆∞∆°ng ph√°p n√†y, ta c·∫ßn t√¨m m·ªôt vector h·ªá s·ªë \(\mathbf{w}\) t∆∞∆°ng ·ª©ng v·ªõi m·ªói <em>user</em> sao cho <em>rating</em> ƒë√£ bi·∫øt m√† <em>user</em> ƒë√≥ cho <em>item</em> x·∫•p x·ªâ v·ªõi: 
\[
y \approx \mathbf{xw}
\]</p>

<p>V·ªõi c√°ch l√†m tr√™n, <a href="/2017/05/17/contentbasedrecommendersys/#-utility-matrix"><em>Utility Matrix</em></a> \(\mathbf{Y}\), gi·∫£ s·ª≠ ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn h·∫øt, s·∫Ω x·∫•p x·ªâ v·ªõi:</p>

<p>\[
\mathbf{Y} \approx \left[ \begin{matrix}
\mathbf{x}_1\mathbf{w}_1 &amp; \mathbf{x}_1\mathbf{w}_2 &amp; \dots &amp; \mathbf{x}_1 \mathbf{w}_N <br />
\mathbf{x}_2\mathbf{w}_1 &amp; \mathbf{x}_2\mathbf{w}_2 &amp; \dots &amp; \mathbf{x}_2 \mathbf{w}_N <br />
\dots &amp; \dots &amp; \ddots &amp; \dots \newline
\mathbf{x}_M\mathbf{w}_1 &amp; \mathbf{x}_M\mathbf{w}_2 &amp; \dots &amp; \mathbf{x}_M \mathbf{w}_N <br />
\end{matrix} \right]
 = \left[ \begin{matrix}
\mathbf{x}_1 \newline
\mathbf{x}_2 \newline
\dots \newline
\mathbf{x}_M \newline
\end{matrix} \right]
\left[ \begin{matrix}
\mathbf{w}_1 &amp; \mathbf{w}_2 &amp; \dots &amp; \mathbf{w}_N
\end{matrix} \right] = \mathbf{XW}
\]</p>

<p>v·ªõi \(M, N\) l·∫ßn l∆∞·ª£t l
√† s·ªë <em>items</em> v√† s·ªë <em>users</em>.</p>

<p>Ch√∫ √Ω r·∫±ng, \(\mathbf{x}\) ƒë∆∞·ª£c x√¢y d·ª±ng d·ª±a tr√™n th√¥ng tin m√¥ t·∫£ c·ªßa <em>item</em> v√† qu√° tr√¨nh x√¢y d·ª±ng n√†y ƒë·ªôc l·∫≠p v·ªõi qu√° tr·ªãnh ƒëi t√¨m h·ªá s·ªë ph√π h·ª£p cho m·ªói <em>user</em>. Nh∆∞ v·∫≠y, vi·ªác x√¢y d·ª±ng <em>item profile</em> ƒë√≥ng vai tr√≤ r·∫•t quan tr·ªçng v√† c√≥ ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp l√™n hi·ªáu nƒÉng c·ªßa m√¥ h√¨nh. Th√™m n·ªØa, vi·ªác x√¢y d·ª±ng t·ª´ng m√¥ h√¨nh ri√™ng l·∫ª cho m·ªói <em>user</em> d·∫´n ƒë·∫øn k·∫øt qu·∫£ ch∆∞a th·ª±c s·ª± t·ªët v√¨ kh√¥ng khai th√°c ƒë∆∞·ª£c ƒë·∫∑c ƒëi·ªÉm c·ªßa nh·ªØng <em>users</em> g·∫ßn gi·ªëng nhau.</p>

<p>B√¢y gi·ªù, gi·∫£ s·ª≠ r·∫±ng ta kh√¥ng c·∫ßn x√¢y d·ª±ng t·ª´ tr∆∞·ªõc c√°c <em>item profile</em> \(\mathbf{x}\) m√† vector ƒë·∫∑c tr∆∞ng cho m·ªói <em>item</em> n√†y c√≥ th·ªÉ ƒë∆∞·ª£c hu·∫•n luy·ªán ƒë·ªìng th·ªùi v·ªõi m√¥ h√¨nh c·ªßa m·ªói <em>user</em> (·ªü ƒë√¢y l√† 1 vector h·ªá s·ªë). ƒêi·ªÅu n√†y nghƒ©a l√†, bi·∫øn s·ªë trong b√†i to√°n t·ªëi ∆∞u l√† c·∫£ \(\mathbf{X}\) v√† \(\mathbf{W}\); trong ƒë√≥, \(\mathbf{X}\) l√† ma tr·∫≠n c·ªßa to√†n b·ªô <em>item profiles</em>, m·ªói <strong>h√†ng</strong> t∆∞∆°ng ·ª©ng v·ªõi 1 <em>item</em>, \(\mathbf{W}\) l√† ma tr·∫≠n c·ªßa to√†n b·ªô <em>user models</em>, m·ªói <strong>c·ªôt</strong> t∆∞∆°ng ·ª©ng v·ªõi 1 <em>user</em>.</p>

<p>V·ªõi c√°ch l√†m n√†y, ch√∫ng ta ƒëang c·ªë g·∫Øng x·∫•p x·ªâ <em>Utility Matrix</em> \(\mathbf{Y} \in \mathbb{R}^{M \times N}\) b·∫±ng t√≠ch c·ªßa hai ma tr·∫≠n \(\mathbf{X}\in \mathbb{R}^{M\times K}\) v√† \(\mathbf{W} \in \mathbb{R}^{K \times N}\).</p>

<p>Th√¥ng th∆∞·ªùng, \(K\) ƒë∆∞·ª£c ch·ªçn l√† m·ªôt s·ªë nh·ªè h∆°n r·∫•t nhi·ªÅu so v·ªõi \(M, N\). Khi ƒë√≥, c·∫£ hai ma tr·∫≠n \(\mathbf{X}\) v√† \(\mathbf{W}\) ƒë·ªÅu c√≥ rank kh√¥ng v∆∞·ª£t qu√° \(K\). Ch√≠nh v√¨ v·∫≠y, ph∆∞∆°ng ph√°p n√†y c√≤n ƒë∆∞·ª£c g·ªçi l√† <em>Low-Rank Matrix Factorization</em> (xem H√¨nh 1).</p>
<hr />

<div class="imgcap">
<img src="/assets/25_mf/mf1.png" align="center" width="800" />
<div class="thecap" align="left">H√¨nh 1: Matrix Factorization. Utility matrix \(\mathbf{Y}\) ƒë∆∞·ª£c ph√¢n t√≠ch th√†nh t√≠ch c·ªßa hai ma tr·∫≠n low-rank \(\mathbf{X}\) v√† \\(\mathbf{W}\) </div>
</div>
<hr />

<p>C√≥ m·ªôt v√†i ƒëi·ªÉm l∆∞u √Ω ·ªü ƒë√¢y:</p>

<ul>
  <li>
    <p>√ù t∆∞·ªüng ch√≠nh ƒë·∫±ng sau Matrix Factorization cho Recommendation Systems l√† t·ªìn t·∫°i c√°c <em>latent features</em> (t√≠nh ch·∫•t ·∫©n) m√¥ t·∫£ s·ª± li√™n quan gi·ªØa c√°c <em>items</em> v√† <em>users</em>. V√≠ d·ª• v·ªõi h·ªá th·ªëng g·ª£i √Ω c√°c b·ªô phim, t√≠nh ch·∫•t ·∫©n c√≥ th·ªÉ l√† <em>h√¨nh s·ª±</em>, <em>ch√≠nh tr·ªã</em>, <em>h√†nh ƒë·ªông</em>, <em>h√†i</em>, ‚Ä¶; c≈©ng c√≥ th·ªÉ l√† m·ªôt s·ª± k·∫øt h·ª£p n√†o ƒë√≥ c·ªßa c√°c th·ªÉ lo·∫°i n√†y; ho·∫∑c c≈©ng c√≥ th·ªÉ l√† b·∫•t c·ª© ƒëi·ªÅu g√¨ m√† ch√∫ng ta kh√¥ng th·ª±c s·ª± c·∫ßn ƒë·∫∑t t√™n. M·ªói <em>item</em> s·∫Ω mang t√≠nh ch·∫•t ·∫©n ·ªü m·ªôt m·ª©c ƒë·ªô n√†o ƒë√≥ t∆∞∆°ng ·ª©ng v·ªõi c√°c h·ªá s·ªë trong vector \(\mathbf{x}\) c·ªßa n√≥, h·ªá s·ªë c√†ng cao t∆∞∆°ng ·ª©ng v·ªõi vi·ªác mang t√≠nh ch·∫•t ƒë√≥ c√†ng cao. T∆∞∆°ng t·ª±, m·ªói <em>user</em> c≈©ng s·∫Ω c√≥ xu h∆∞·ªõng th√≠ch nh·ªØng t√≠nh ch·∫•t ·∫©n n√†o ƒë√≥ v√† ƒë∆∞·ª£c m√¥ t·∫£ b·ªüi c√°c h·ªá s·ªë trong vector \(\mathbf{w}\) c·ªßa n√≥. H·ªá s·ªë cao t∆∞∆°ng ·ª©ng v·ªõi vi·ªác <em>user</em> th√≠ch c√°c b·ªô phim c√≥ t√≠nh ch·∫•t ·∫©n ƒë√≥. Gi√° tr·ªã c·ªßa bi·ªÉu th·ª©c \(\mathbf{xw}\) s·∫Ω cao n·∫øu c√°c th√†nh ph·∫ßn t∆∞∆°ng ·ª©ng c·ªßa \(\mathbf{x}\) v√† \(\mathbf{w}\) ƒë·ªÅu cao. ƒêi·ªÅu n√†y nghƒ©a l√† <em>item</em> mang c√°c t√≠nh ch·∫•t ·∫©n m√† <em>user</em> th√≠ch, v·∫≠y th√¨ n√™n g·ª£i √Ω <em>item</em> n√†y cho <em>user</em> ƒë√≥.</p>
  </li>
  <li>
    <p>V·∫≠y t·∫°i sao Matrix Factorization l·∫°i ƒë∆∞·ª£c x·∫øp v√†o Collaborative Filtering? C√¢u tr·∫£ l·ªùi ƒë·∫øn t·ª´ vi·ªác ƒëi t·ªëi ∆∞u h√†m m·∫•t m√°t m√† ch√∫ng ta s·∫Ω th·∫£o lu·∫≠n ·ªü M·ª•c 2. V·ªÅ c∆° b·∫£n, ƒë·ªÉ t√¨m nghi·ªám c·ªßa b√†i to√°n t·ªëi ∆∞u, ta ph·∫£i l·∫ßn l∆∞·ª£t ƒëi t√¨m \(\mathbf{X}\) v√† \(\mathbf{W}\) khi th√†nh ph·∫ßn c√≤n l·∫°i ƒë∆∞·ª£c c·ªë ƒë·ªãnh. Nh∆∞ v·∫≠y, m·ªói h√†ng c·ªßa \(\mathbf{X}\) s·∫Ω ph·ª• thu·ªôc v√†o to√†n b·ªô c√°c c·ªôt c·ªßa \(\mathbf{W}\). Ng∆∞·ª£c l·∫°i, m·ªói c·ªôt c·ªßa \(\mathbf{W}\) l·∫°i ph·ª•c thu·ªôc v√†o to√†n b·ªô c√°c h√†ng c·ªßa \(\mathbf{X}\). Nh∆∞ v·∫≠y, c√≥ nh·ªØng m·ªói quan h·ªá r√†ng bu·ªôc <em>ch·∫±ng ch·ªãt</em> gi·ªØa c√°c th√†nh ph·∫ßn c·ªßa hai ma tr·∫≠n tr√™n. T·ª©c ch√∫ng ta c·∫ßn s·ª≠ d·ª•ng th√¥ng tin c·ªßa t·∫•t c·∫£ ƒë·ªÉ suy ra t·∫•t c·∫£. V·∫≠y n√™n ph∆∞∆°ng ph√°p n√†y c≈©ng ƒë∆∞·ª£c x·∫øp v√†o Collaborative Filtering.</p>
  </li>
  <li>
    <p>Trong c√°c b√†i to√°n th·ª±c t·∫ø, s·ªë l∆∞·ª£ng <em>items</em> \(M\) v√† s·ªë l∆∞·ª£ng <em>users</em> \(N\) th∆∞·ªùng r·∫•t l·ªõn. Vi·ªác t√¨m ra c√°c m√¥ h√¨nh ƒë∆°n gi·∫£n gi√∫p d·ª± ƒëo√°n <em>ratings</em> c·∫ßn ƒë∆∞·ª£c th·ª±c hi·ªán m·ªôt c√°ch nhanh nh·∫•t c√≥ th·ªÉ. <a href="/2017/05/24/collaborativefiltering/">Neighborhood-based Collaborative Filtering</a> kh√¥ng y√™u c·∫ßu vi·ªác <em>learning</em> qu√° nhi·ªÅu, nh∆∞ng trong qu√° tr√¨nh d·ª± ƒëo√°n (<em>inference</em>), ta c·∫ßn ƒëi t√¨m ƒë·ªô <em>similarity</em> c·ªßa <em>user</em> ƒëang x√©t v·ªõi <em>to√†n b·ªô</em> c√°c <em>users</em> c√≤n l·∫°i r·ªìi suy ra k·∫øt qu·∫£. Ng∆∞·ª£c l·∫°i, v·ªõi Matrix Factorization, vi·ªác <em>learning</em> c√≥ th·ªÉ h∆°i ph·ª©c t·∫°p m·ªôt ch√∫t v√¨ ph·∫£i l·∫∑p ƒëi l·∫∑p l·∫°i vi·ªác t·ªëi ∆∞u m·ªôt ma tr·∫≠n khi c·ªë ƒë·ªãnh ma tr·∫≠n c√≤n l·∫°i, nh∆∞ng vi·ªác <em>inference</em> ƒë∆°n gi·∫£n h∆°n v√¨ ta ch·ªâ c·∫ßn l·∫•y t√≠ch c·ªßa hai vector \(\mathbf{xw}\), m·ªói vector c√≥ ƒë·ªô d√†i \(K\) l√† m·ªôt s·ªë nh·ªè h∆°n nhi·ªÅu so v·ªõi \(M, N\). V·∫≠y n√™n qu√° tr√¨nh <em>inference</em> kh√¥ng y√™u c·∫ßu kh·∫£ nƒÉng t√≠nh to√°n cao. Vi·ªác n√†y khi·∫øn n√≥ ph√π h·ª£p v·ªõi c√°c m√¥ h√¨nh c√≥ t·∫≠p d·ªØ li·ªáu l·ªõn.</p>
  </li>
  <li>
    <p>Th√™m n·ªØa, vi·ªác l∆∞u tr·ªØ hai ma tr·∫≠n \(\mathbf{X}\) v√† \(\mathbf{W}\) y√™u c·∫ßu l∆∞·ª£ng b·ªô nh·ªõ nh·ªè khi so v·ªõi vi·ªác l∆∞u to√†n b·ªô <em>Similarity matrix</em> trong Neighborhood-based Collaborative Filtering. C·ª• th·ªÉ, ta c·∫ßn b·ªô nh·ªõ ƒë·ªÉ ch·ª©a \(K(M+N)\) ph·∫ßn t·ª≠ thay v√¨ l∆∞u \(M^2\) ho·∫∑c \(N^2\) c·ªßa <em>Similarity matrix</em>.</p>
  </li>
</ul>

<p>Ti·∫øp theo, ch√∫ng ta c√πng ƒëi x√¢y d·ª±ng h√†m m·∫•t m√°t v√† c√°ch t·ªëi ∆∞u n√≥.</p>

<p><a name="-xay-dung-va-toi-uu-ham-mat-mat"></a></p>

<h2 id="2-x√¢y-d·ª±ng-v√†-t·ªëi-∆∞u-h√†m-m·∫•t-m√°t">2. X√¢y d·ª±ng v√† t·ªëi ∆∞u h√†m m·∫•t m√°t</h2>

<p><a name="-ham-mat-mat"></a></p>

<h3 id="21-h√†m-m·∫•t-m√°t">2.1. H√†m m·∫•t m√°t</h3>
<p><a href="/2017/05/17/contentbasedrecommendersys/#-xay-dung-ham-mat-mat">T∆∞∆°ng t·ª± nh∆∞ trong Content-based Recommendation Systems</a>, vi·ªác x√¢y d·ª±ng h√†m m·∫•t m√°t c≈©ng ƒë∆∞·ª£c d·ª±a tr√™n c√°c th√†nh ph·∫ßn ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn c·ªßa Utility Matrix \(\mathbf{Y}\), c√≥ kh√°c m·ªôt ch√∫t l√† kh√¥ng c√≥ th√†nh ph·∫ßn bias v√† bi·∫øn t·ªëi ∆∞u l√† c·∫£ \(\mathbf{X}\) v√† \(\mathbf{W}\). Vi·ªác th√™m bias v√†o s·∫Ω ƒë∆∞·ª£c th·∫£o lu·∫≠n ·ªü M·ª•c 4. Vi·ªác x√¢y d·ª±ng h√†m m·∫•t m√°t cho Matrix Factorization l√† t∆∞∆°ng ƒë·ªëi d·ªÖ hi·ªÉu:</p>

<p>\[
\mathcal{L}(\mathbf{X}, \mathbf{W}) = \frac{1}{2s} \sum_{n=1}^N \sum_{m:r_{mn} = 1} (y_{mn} - \mathbf{x}_m\mathbf{w}_n)^2 + \frac{\lambda}{2} (||\mathbf{X}||_F^2 + ||\mathbf{W}||_F^2) ~~~~~ (1)
\]</p>

<p>trong ƒë√≥ \(r_{mn} = 1\) n·∫øu <em>item</em> th·ª© \(m\) ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√° b·ªüi <em>user</em> th·ª© \(n\), \(||\bullet||_F^2\) l√† <a href="/math/#chuan-cua-ma-tran">Frobineous norm</a>, t·ª©c cƒÉn b·∫≠c hai c·ªßa t·ªïng b√¨nh ph∆∞∆°ng t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ c·ªßa ma tr·∫≠n (gi·ªëng v·ªõi norm 2 trong vector), \(s\) l√† to√†n b·ªô s·ªë <em>ratings</em> ƒë√£ c√≥. Th√†nh ph·∫ßn th·ª© nh·∫•t ch√≠nh l√† trung b√¨nh sai s·ªë c·ªßa m√¥ h√¨nh. Th√†nh ph·∫ßn th·ª© hai trong h√†m m·∫•t m√°t ph√≠a tr√™n l√† <a href="/2017/03/04/overfitting/#-\\l\\-regularization">\(l_2\) regularization</a>, gi√∫p tr√°nh <a href="/2017/03/04/overfitting/">overfitting</a>.</p>

<blockquote>
  <p><strong>L∆∞u √Ω:</strong> Gi√° tr·ªã <em>ratings</em> th∆∞·ªùng l√† c√°c gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c chu·∫©n ho√°, b·∫±ng c√°ch tr·ª´ m·ªói h√†ng c·ªßa Utility Matrix ƒëi trung b√¨nh c·ªông c·ªßa c√°c gi√° tr·ªã ƒë√£ bi·∫øt c·ªßa h√†ng ƒë√≥ (item-based) ho·∫∑c tr·ª´ m·ªói c·ªôt ƒëi trung b√¨nh c·ªông c·ªßa c√°c gi√° tr·ªã ƒë√£ bi·∫øt trong c·ªôt ƒë√≥ (user_based). Trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p nh·∫•t ƒë·ªãnh, ta kh√¥ng c·∫ßn chu·∫©n ho√° ma tr·∫≠n n√†y, nh∆∞ng k√®m theo ƒë√≥ ph·∫£i c√≥ th√™m c√°c k·ªπ thu·∫≠t kh√°c ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ <em>thi√™n l·ªách</em> trong khi <em>rating</em>.</p>
</blockquote>

<p>Vi·ªác t·ªëi ∆∞u ƒë·ªìng th·ªùi \(\mathbf{X}, \mathbf{W}\) l√† t∆∞∆°ng ƒë·ªëi ph·ª©c t·∫°p, thay v√†o ƒë√≥, ph∆∞∆°ng ph√°p ƒë∆∞·ª£c s·ª≠ d·ª•ng l√† l·∫ßn l∆∞·ª£t t·ªëi ∆∞u m·ªôt ma tr·∫≠n trong khi c·ªë ƒë·ªãnh ma tr·∫≠n kia, t·ªõi khi h·ªôi t·ª•.</p>

<p><a name="-toi-uu-ham-mat-mat"></a></p>

<h3 id="22-t·ªëi-∆∞u-h√†m-m·∫•t-m√°t">2.2. T·ªëi ∆∞u h√†m m·∫•t m√°t</h3>
<p>Khi c·ªë ƒë·ªãnh \(\mathbf{X}\), vi·ªác t·ªëi ∆∞u \(\mathbf{W}\) ch√≠nh l√† b√†i to√°n t·ªëi ∆∞u trong Content-based Recommendation Systems:</p>

<p>\[
\mathcal{L}(\mathbf{W}) = \frac{1}{2s} \sum_{n=1}^N \sum_{m:r_{mn} = 1} (y_{mn} - \mathbf{x}_m\mathbf{w}_n)^2 + \frac{\lambda}{2} ||\mathbf{W}||_F^2 ~~~~~ (2)
\]</p>

<p>Khi c·ªë ƒë·ªãnh \(\mathbf{W}\), vi·ªác t·ªëi ∆∞u \(\mathbf{X}\) ƒë∆∞·ª£c ƒë∆∞a v·ªÅ t·ªëi ∆∞u h√†m:</p>

<p>\[
\mathcal{L}(\mathbf{X}) = \frac{1}{2s} \sum_{n=1}^N \sum_{m:r_{mn} = 1} (y_{mn} - \mathbf{x}_m\mathbf{w}_n)^2 + \frac{\lambda}{2} ||\mathbf{X}||_F^2 ~~~~~ (3)
\]</p>

<p>Hai b√†i to√°n n√†y s·∫Ω ƒë∆∞·ª£c t·ªëi ∆∞u b·∫±ng <a href="/2017/01/12/gradientdescent/">Gradient Descent</a>.</p>

<p>Ch√∫ng ta c√≥ th·ªÉ th·∫•y r·∫±ng b√†i to√°n \((2)\) c√≥ th·ªÉ ƒë∆∞·ª£c t√°ch th√†nh \(N\) b√†i to√°n nh·ªè, m·ªói b√†i to√°n ·ª©ng v·ªõi vi·ªác ƒëi t·ªëi ∆∞u m·ªôt c·ªôt c·ªßa ma tr·∫≠n \(\mathbf{W}\): 
\[
\mathcal{L}(\mathbf{w}_n) = \frac{1}{2s} \sum_{m:r_{mn} = 1} (y_{mn} - \mathbf{x}_m\mathbf{w}_n)^2 + \frac{\lambda}{2}||\mathbf{w}_n||_2^2 ~~~~ (4)
\]</p>

<p>V√¨ bi·ªÉu th·ª©c trong d·∫•u \(\sum\) ch·ªâ ph·ª• thu·ªôc v√†o c√°c <em>items</em> ƒë√£ ƒë∆∞·ª£c <em>rated</em> b·ªüi <em>user</em> ƒëang x√©t, ta c√≥ th·ªÉ ƒë∆°n gi·∫£n n√≥ b·∫±ng c√°ch ƒë·∫∑t \(\hat{\mathbf{X}}_n\) l√† ma tr·∫≠n ƒë∆∞·ª£c t·∫°o b·ªüi c√°c h√†ng t∆∞∆°ng ·ª©ng v·ªõi c√°c <em>items</em> ƒë√£ ƒë∆∞·ª£c <em>rated</em> ƒë√≥, v√† \(\hat{\mathbf{y}}_n\) l√† c√°c <em>ratings</em> t∆∞∆°ng ·ª©ng. Khi ƒë√≥: 
\[
\mathcal{L}(\mathbf{w}_n) = \frac{1}{2s} ||\hat{\mathbf{y}}_n - \hat{\mathbf{X}}_n\mathbf{w}_n||^2 + \frac{\lambda}{2}||\mathbf{w}_n||_2^2 ~~~~~(5)
\]
v√† ƒë·∫°o h√†m c·ªßa n√≥: 
\[
\frac{\partial \mathcal{L}(\mathbf{w}_n)}{\partial \mathbf{w}_n} = -\frac{1}{s}\hat{\mathbf{X}}_n^T(\hat{\mathbf{y}}_n - \hat{\mathbf{X}}_n\mathbf{w}_n) + \lambda \mathbf{w}_n ~~~~~ (6)
\]</p>

<p><strong>V·∫≠y c√¥ng th·ª©c c·∫≠p nh·∫≠t cho m·ªói c·ªôt c·ªßa \(\mathbf{W}\) l√†:</strong> 
\[
\mathbf{w}_n = \mathbf{w}_n - \eta \left(-\frac{1}{s}\hat{\mathbf{X}}_n^T (\hat{\mathbf{y}}_n - \hat{\mathbf{X}}_n\mathbf{w}_n) + \lambda \mathbf{w}_n\right) ~~~~~(7)
\]</p>

<p>T∆∞∆°ng t·ª± nh∆∞ th·∫ø, m·ªói c·ªôt c·ªßa \(\mathbf{X}\), t·ª©c vector cho m·ªói <em>item</em>, s·∫Ω ƒë∆∞·ª£c t√¨m b·∫±ng c√°ch t·ªëi ∆∞u: 
\[
\begin{eqnarray}
\mathcal{L}(\mathbf{x}_m) &amp;=&amp; \frac{1}{2s}\sum_{n:r_{mn} = 1} (y_{mn} - \mathbf{x}_m\mathbf{w}_n)^2 + \frac{\lambda}{2}||\mathbf{x}_m||_2^2 ~~~~ (8)
\end{eqnarray}
\]</p>

<p>ƒê·∫∑t \(\hat{\mathbf{W}}_m\) l√† ma tr·∫≠n ƒë∆∞·ª£c t·∫°o b·∫±ng c√°c c·ªôt c·ªßa \(\mathbf{W}\) ·ª©ng v·ªõi c√°c <em>users</em> ƒë√£ ƒë√°nh gi√° <em>item</em> ƒë√≥ v√† \(\hat{\mathbf{y}}^m\) l√† vector <em>ratings</em> t∆∞∆°ng ·ª©ng. \((8)\) tr·ªü th√†nh:</p>

<p>\[
\mathcal{L}(\mathbf{x}_m)
 = \frac{1}{2s}||\hat{\mathbf{y}}^m - {\mathbf{x}}_m\hat{\mathbf{W}}_m||_2^2 + \frac{\lambda}{2} ||\mathbf{x}_m||_2^2 ~~~~~ (9)
\]
T∆∞∆°ng t·ª± nh∆∞ tr√™n, <strong>c√¥ng th·ª©c c·∫≠p nh·∫≠t cho m·ªìi h√†ng c·ªßa \(\mathbf{X}\) s·∫Ω c√≥ d·∫°ng:</strong>
\[
\mathbf{x}_m = \mathbf{x}_m - \eta\left(-\frac{1}{s}(\hat{\mathbf{y}}^m - \mathbf{x}_m\hat{\mathbf{W}}_m)\hat{\mathbf{W}}_m^T + \lambda \mathbf{x}_m\right) ~~~~~ (10)
\]</p>

<p><em>B·∫°n ƒë·ªçc c√≥ th·ªÉ mu·ªën xem th√™m <a href="/math/#-dao-ham-cua-ham-nhieu-bien">ƒê·∫°o h√†m c·ªßa h√†m nhi·ªÅu bi·∫øn</a></em>
<a name="-lap-trinh-python"></a></p>

<h2 id="3-l·∫≠p-tr√¨nh-python">3. L·∫≠p tr√¨nh Python</h2>
<p>Ti·∫øp theo, ch√∫ng ta s·∫Ω ƒëi s√¢u v√†o ph·∫ßn l·∫≠p tr√¨nh.</p>

<p><a name="-class-mf"></a></p>

<h3 id="31-class-mf">3.1. <code class="language-plaintext highlighter-rouge">class MF</code></h3>

<p><strong>Kh·ªüi t·∫°o v√† chu·∫©n ho√°:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span> 
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics.pairwise</span> <span class="kn">import</span> <span class="n">cosine_similarity</span>
<span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">sparse</span> 

<span class="k">class</span> <span class="nc">MF</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="s">"""docstring for CF"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">Y_data</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">lam</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">,</span> <span class="n">Xinit</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">Winit</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> 
            <span class="n">learning_rate</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">max_iter</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">print_every</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">user_based</span> <span class="o">=</span> <span class="mi">1</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">Y_raw_data</span> <span class="o">=</span> <span class="n">Y_data</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">K</span> <span class="o">=</span> <span class="n">K</span>
        <span class="c1"># regularization parameter
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">lam</span> <span class="o">=</span> <span class="n">lam</span>
        <span class="c1"># learning rate for gradient descent
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">learning_rate</span> <span class="o">=</span> <span class="n">learning_rate</span>
        <span class="c1"># maximum number of iterations
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">max_iter</span> <span class="o">=</span> <span class="n">max_iter</span>
        <span class="c1"># print results after print_every iterations
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">print_every</span> <span class="o">=</span> <span class="n">print_every</span>
        <span class="c1"># user-based or item-based
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">user_based</span> <span class="o">=</span> <span class="n">user_based</span>
        <span class="c1"># number of users, items, and ratings. Remember to add 1 since id starts from 0
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">n_users</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="n">Y_data</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]))</span> <span class="o">+</span> <span class="mi">1</span> 
        <span class="bp">self</span><span class="p">.</span><span class="n">n_items</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="n">Y_data</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]))</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">n_ratings</span> <span class="o">=</span> <span class="n">Y_data</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        
        <span class="k">if</span> <span class="n">Xinit</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="c1"># new
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n_items</span><span class="p">,</span> <span class="n">K</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span> <span class="c1"># or from saved data
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">X</span> <span class="o">=</span> <span class="n">Xinit</span> 
        
        <span class="k">if</span> <span class="n">Winit</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> 
            <span class="bp">self</span><span class="p">.</span><span class="n">W</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="n">K</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">n_users</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span> <span class="c1"># from daved data
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">W</span> <span class="o">=</span> <span class="n">Winit</span>
            
        <span class="c1"># normalized data, update later in normalized_Y function
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">Y_raw_data</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>


    <span class="k">def</span> <span class="nf">normalize_Y</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">user_based</span><span class="p">:</span>
            <span class="n">user_col</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">item_col</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="n">n_objects</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">n_users</span>

        <span class="c1"># if we want to normalize based on item, just switch first two columns of data
</span>        <span class="k">else</span><span class="p">:</span> <span class="c1"># item bas
</span>            <span class="n">user_col</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="n">item_col</span> <span class="o">=</span> <span class="mi">0</span> 
            <span class="n">n_objects</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">n_items</span>

        <span class="n">users</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">Y_raw_data</span><span class="p">[:,</span> <span class="n">user_col</span><span class="p">]</span> 
        <span class="bp">self</span><span class="p">.</span><span class="n">mu</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">n_objects</span><span class="p">,))</span>
        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_objects</span><span class="p">):</span>
            <span class="c1"># row indices of rating done by user n
</span>            <span class="c1"># since indices need to be integers, we need to convert
</span>            <span class="n">ids</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="n">users</span> <span class="o">==</span> <span class="n">n</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int32</span><span class="p">)</span>
            <span class="c1"># indices of all ratings associated with user n
</span>            <span class="n">item_ids</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span><span class="p">[</span><span class="n">ids</span><span class="p">,</span> <span class="n">item_col</span><span class="p">]</span> 
            <span class="c1"># and the corresponding ratings 
</span>            <span class="n">ratings</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span><span class="p">[</span><span class="n">ids</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
            <span class="c1"># take mean
</span>            <span class="n">m</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">ratings</span><span class="p">)</span> 
            <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="n">isnan</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
                <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># to avoid empty array and nan value
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">mu</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">m</span>
            <span class="c1"># normalize
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span><span class="p">[</span><span class="n">ids</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">ratings</span> <span class="o">-</span> <span class="bp">self</span><span class="p">.</span><span class="n">mu</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
</code></pre></div></div>

<p><strong>T√≠nh gi√° tr·ªã h√†m m·∫•t m√°t:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">loss</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">L</span> <span class="o">=</span> <span class="mi">0</span> 
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n_ratings</span><span class="p">):</span>
            <span class="c1"># user, item, rating
</span>            <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">rate</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span> <span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
            <span class="n">L</span> <span class="o">+=</span> <span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="n">rate</span> <span class="o">-</span> <span class="bp">self</span><span class="p">.</span><span class="n">X</span><span class="p">[</span><span class="n">m</span><span class="p">,</span> <span class="p">:].</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">W</span><span class="p">[:,</span> <span class="n">n</span><span class="p">]))</span><span class="o">**</span><span class="mi">2</span>
        
        <span class="c1"># take average
</span>        <span class="n">L</span> <span class="o">/=</span> <span class="bp">self</span><span class="p">.</span><span class="n">n_ratings</span>
        <span class="c1"># regularization, don't ever forget this 
</span>        <span class="n">L</span> <span class="o">+=</span> <span class="mf">0.5</span><span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">lam</span><span class="o">*</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">X</span><span class="p">,</span> <span class="s">'fro'</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">W</span><span class="p">,</span> <span class="s">'fro'</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">L</span> 
</code></pre></div></div>

<p><strong>X√°c ƒë·ªãnh c√°c <em>items</em> ƒë∆∞·ª£c ƒë√°nh gi√° b·ªüi 1 <em>user</em>, v√† <em>users</em> ƒë√£ ƒë√°nh gi√° 1 <em>item</em> v√† c√°c <em>ratings</em> t∆∞∆°ng ·ª©ng:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">get_items_rated_by_user</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">user_id</span><span class="p">):</span>
        <span class="s">"""
        get all items which are rated by user user_id, and the corresponding ratings
        """</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span><span class="p">[:,</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">user_id</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> 
        <span class="n">item_ids</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span><span class="p">[</span><span class="n">ids</span><span class="p">,</span> <span class="mi">1</span><span class="p">].</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int32</span><span class="p">)</span> <span class="c1"># indices need to be integers
</span>        <span class="n">ratings</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span><span class="p">[</span><span class="n">ids</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">item_ids</span><span class="p">,</span> <span class="n">ratings</span><span class="p">)</span>
        
        
    <span class="k">def</span> <span class="nf">get_users_who_rate_item</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item_id</span><span class="p">):</span>
        <span class="s">"""
        get all users who rated item item_id and get the corresponding ratings
        """</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">item_id</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> 
        <span class="n">user_ids</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span><span class="p">[</span><span class="n">ids</span><span class="p">,</span> <span class="mi">0</span><span class="p">].</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int32</span><span class="p">)</span>
        <span class="n">ratings</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span><span class="p">[</span><span class="n">ids</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">user_ids</span><span class="p">,</span> <span class="n">ratings</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>C·∫≠p nh·∫≠t \(\mathbf{X}, \mathbf{W}\):</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">updateX</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n_items</span><span class="p">):</span>
            <span class="n">user_ids</span><span class="p">,</span> <span class="n">ratings</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_users_who_rate_item</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
            <span class="n">Wm</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">W</span><span class="p">[:,</span> <span class="n">user_ids</span><span class="p">]</span>
            <span class="c1"># gradient
</span>            <span class="n">grad_xm</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="n">ratings</span> <span class="o">-</span> <span class="bp">self</span><span class="p">.</span><span class="n">X</span><span class="p">[</span><span class="n">m</span><span class="p">,</span> <span class="p">:].</span><span class="n">dot</span><span class="p">(</span><span class="n">Wm</span><span class="p">)).</span><span class="n">dot</span><span class="p">(</span><span class="n">Wm</span><span class="p">.</span><span class="n">T</span><span class="p">)</span><span class="o">/</span><span class="bp">self</span><span class="p">.</span><span class="n">n_ratings</span> <span class="o">+</span> \
                                               <span class="bp">self</span><span class="p">.</span><span class="n">lam</span><span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">X</span><span class="p">[</span><span class="n">m</span><span class="p">,</span> <span class="p">:]</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">X</span><span class="p">[</span><span class="n">m</span><span class="p">,</span> <span class="p">:]</span> <span class="o">-=</span> <span class="bp">self</span><span class="p">.</span><span class="n">learning_rate</span><span class="o">*</span><span class="n">grad_xm</span><span class="p">.</span><span class="n">reshape</span><span class="p">((</span><span class="bp">self</span><span class="p">.</span><span class="n">K</span><span class="p">,))</span>
    
    <span class="k">def</span> <span class="nf">updateW</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n_users</span><span class="p">):</span>
            <span class="n">item_ids</span><span class="p">,</span> <span class="n">ratings</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_items_rated_by_user</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
            <span class="n">Xn</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">X</span><span class="p">[</span><span class="n">item_ids</span><span class="p">,</span> <span class="p">:]</span>
            <span class="c1"># gradient
</span>            <span class="n">grad_wn</span> <span class="o">=</span> <span class="o">-</span><span class="n">Xn</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">ratings</span> <span class="o">-</span> <span class="n">Xn</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">W</span><span class="p">[:,</span> <span class="n">n</span><span class="p">]))</span><span class="o">/</span><span class="bp">self</span><span class="p">.</span><span class="n">n_ratings</span> <span class="o">+</span> \
                        <span class="bp">self</span><span class="p">.</span><span class="n">lam</span><span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">W</span><span class="p">[:,</span> <span class="n">n</span><span class="p">]</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">W</span><span class="p">[:,</span> <span class="n">n</span><span class="p">]</span> <span class="o">-=</span> <span class="bp">self</span><span class="p">.</span><span class="n">learning_rate</span><span class="o">*</span><span class="n">grad_wn</span><span class="p">.</span><span class="n">reshape</span><span class="p">((</span><span class="bp">self</span><span class="p">.</span><span class="n">K</span><span class="p">,))</span>
</code></pre></div></div>

<p><strong>Ph·∫ßn thu·∫≠t to√°n ch√≠nh:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">normalize_Y</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">it</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">max_iter</span><span class="p">):</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">updateX</span><span class="p">()</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">updateW</span><span class="p">()</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">print_every</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">rmse_train</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">evaluate_RMSE</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">Y_raw_data</span><span class="p">)</span>
                <span class="k">print</span> <span class="s">'iter ='</span><span class="p">,</span> <span class="n">it</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="s">', loss ='</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">loss</span><span class="p">(),</span> <span class="s">', RMSE train ='</span><span class="p">,</span> <span class="n">rmse_train</span>
</code></pre></div></div>

<p><strong>D·ª± ƒëo√°n:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">pred</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
        <span class="s">""" 
        predict the rating of user u for item i 
        if you need the un
        """</span>
        <span class="n">u</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">user_based</span><span class="p">:</span>
            <span class="n">bias</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">mu</span><span class="p">[</span><span class="n">u</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span> 
            <span class="n">bias</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">mu</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">pred</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="p">:].</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">W</span><span class="p">[:,</span> <span class="n">u</span><span class="p">])</span> <span class="o">+</span> <span class="n">bias</span> 
        <span class="c1"># truncate if results are out of range [0, 5]
</span>        <span class="k">if</span> <span class="n">pred</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span> 
        <span class="k">if</span> <span class="n">pred</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">:</span> 
            <span class="k">return</span> <span class="mi">5</span> 
        <span class="k">return</span> <span class="n">pred</span> 
        
    
    <span class="k">def</span> <span class="nf">pred_for_user</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">user_id</span><span class="p">):</span>
        <span class="s">"""
        predict ratings one user give all unrated items
        """</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">user_id</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">items_rated_by_u</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">Y_data_n</span><span class="p">[</span><span class="n">ids</span><span class="p">,</span> <span class="mi">1</span><span class="p">].</span><span class="n">tolist</span><span class="p">()</span>              
        
        <span class="n">y_pred</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">X</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">W</span><span class="p">[:,</span> <span class="n">user_id</span><span class="p">])</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">mu</span><span class="p">[</span><span class="n">user_id</span><span class="p">]</span>
        <span class="n">predicted_ratings</span><span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n_items</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">items_rated_by_u</span><span class="p">:</span>
                <span class="n">predicted_ratings</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">i</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
        
        <span class="k">return</span> <span class="n">predicted_ratings</span>
</code></pre></div></div>

<p><strong>ƒê√°nh gi√° k·∫øt qu·∫£ b·∫±ng c√°ch ƒëo Root Mean Square Error:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">evaluate_RMSE</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">rate_test</span><span class="p">):</span>
        <span class="n">n_tests</span> <span class="o">=</span> <span class="n">rate_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">SE</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># squared error
</span>        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_tests</span><span class="p">):</span>
            <span class="n">pred</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">pred</span><span class="p">(</span><span class="n">rate_test</span><span class="p">[</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">rate_test</span><span class="p">[</span><span class="n">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
            <span class="n">SE</span> <span class="o">+=</span> <span class="p">(</span><span class="n">pred</span> <span class="o">-</span> <span class="n">rate_test</span><span class="p">[</span><span class="n">n</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span><span class="o">**</span><span class="mi">2</span> 

        <span class="n">RMSE</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">SE</span><span class="o">/</span><span class="n">n_tests</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">RMSE</span>
</code></pre></div></div>

<p><a name="-ap-dung-len-movielens-k"></a></p>

<h3 id="32-√°p-d·ª•ng-l√™n-movielens-100k">3.2. √Åp d·ª•ng l√™n MovieLens 100k</h3>

<p>Ch√∫ng ta c√πng quay l·∫°i v·ªõi c∆° s·ªü d·ªØ li·ªáu <a href="/2017/05/17/contentbasedrecommendersys/#-co-so-du-lieu-movielens-k">MovieLens 100k</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">r_cols</span> <span class="o">=</span> <span class="p">[</span><span class="s">'user_id'</span><span class="p">,</span> <span class="s">'movie_id'</span><span class="p">,</span> <span class="s">'rating'</span><span class="p">,</span> <span class="s">'unix_timestamp'</span><span class="p">]</span>

<span class="n">ratings_base</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'ml-100k/ub.base'</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\t</span><span class="s">'</span><span class="p">,</span> <span class="n">names</span><span class="o">=</span><span class="n">r_cols</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'latin-1'</span><span class="p">)</span>
<span class="n">ratings_test</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'ml-100k/ub.test'</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\t</span><span class="s">'</span><span class="p">,</span> <span class="n">names</span><span class="o">=</span><span class="n">r_cols</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'latin-1'</span><span class="p">)</span>

<span class="n">rate_train</span> <span class="o">=</span> <span class="n">ratings_base</span><span class="p">.</span><span class="n">as_matrix</span><span class="p">()</span>
<span class="n">rate_test</span> <span class="o">=</span> <span class="n">ratings_test</span><span class="p">.</span><span class="n">as_matrix</span><span class="p">()</span>

<span class="c1"># indices start from 0
</span><span class="n">rate_train</span><span class="p">[:,</span> <span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
<span class="n">rate_test</span><span class="p">[:,</span> <span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
</code></pre></div></div>

<p>K·∫øt qu·∫£ n·∫øu s∆∞ d·ª•ng c√°ch <strong>chu·∫©n ho√° d·ª±a tr√™n <em>user</em>:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rs</span> <span class="o">=</span> <span class="n">MF</span><span class="p">(</span><span class="n">rate_train</span><span class="p">,</span> <span class="n">K</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">lam</span> <span class="o">=</span> <span class="p">.</span><span class="mi">1</span><span class="p">,</span> <span class="n">print_every</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> 
    <span class="n">learning_rate</span> <span class="o">=</span> <span class="mf">0.75</span><span class="p">,</span> <span class="n">max_iter</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">user_based</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">rs</span><span class="p">.</span><span class="n">fit</span><span class="p">()</span>
<span class="c1"># evaluate on test data
</span><span class="n">RMSE</span> <span class="o">=</span> <span class="n">rs</span><span class="p">.</span><span class="n">evaluate_RMSE</span><span class="p">(</span><span class="n">rate_test</span><span class="p">)</span>
<span class="k">print</span> <span class="s">'</span><span class="se">\n</span><span class="s">User-based MF, RMSE ='</span><span class="p">,</span> <span class="n">RMSE</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iter = 10 , loss = 5.67288309116 , RMSE train = 1.20479476967
iter = 20 , loss = 2.64823713338 , RMSE train = 1.03727078113
iter = 30 , loss = 1.34749564429 , RMSE train = 1.02937828335
iter = 40 , loss = 0.754769340402 , RMSE train = 1.0291792473
iter = 50 , loss = 0.48310745143 , RMSE train = 1.0292035212
iter = 60 , loss = 0.358530096403 , RMSE train = 1.02921183102
iter = 70 , loss = 0.30139979707 , RMSE train = 1.02921377947
iter = 80 , loss = 0.27520033847 , RMSE train = 1.02921421055
iter = 90 , loss = 0.263185542009 , RMSE train = 1.02921430477
iter = 100 , loss = 0.257675693217 , RMSE train = 1.02921432529

User-based MF, RMSE = 1.06037991127
</code></pre></div></div>

<p>Ta nh·∫≠n th·∫•y r·∫±ng gi√° tr·ªã <code class="language-plaintext highlighter-rouge">loss</code> gi·∫£m d·∫ßn v√† <code class="language-plaintext highlighter-rouge">RMSE train</code> c≈©ng gi·∫£m d·∫ßn khi s·ªë v√≤ng l·∫∑p tƒÉng l√™n. RMSE c√≥ cao h∆°n so v·ªõi Neighborhood-based Collaborative Filtering (~0.99) m·ªôt ch√∫t nh∆∞ng v·∫´n t·ªët h∆°n k·∫øt qu·∫£ c·ªßa Content-based Recommendation Systems r·∫•t nhi·ªÅu (~1.2).</p>

<p>N·∫øu <strong>chu·∫©n ho√° d·ª±a tr√™n <em>item</em>:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rs</span> <span class="o">=</span> <span class="n">MF</span><span class="p">(</span><span class="n">rate_train</span><span class="p">,</span> <span class="n">K</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">lam</span> <span class="o">=</span> <span class="p">.</span><span class="mi">1</span><span class="p">,</span> <span class="n">print_every</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">learning_rate</span> <span class="o">=</span> <span class="mf">0.75</span><span class="p">,</span> <span class="n">max_iter</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">user_based</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">rs</span><span class="p">.</span><span class="n">fit</span><span class="p">()</span>
<span class="c1"># evaluate on test data
</span><span class="n">RMSE</span> <span class="o">=</span> <span class="n">rs</span><span class="p">.</span><span class="n">evaluate_RMSE</span><span class="p">(</span><span class="n">rate_test</span><span class="p">)</span>
<span class="k">print</span> <span class="s">'</span><span class="se">\n</span><span class="s">Item-based MF, RMSE ='</span><span class="p">,</span> <span class="n">RMSE</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iter = 10 , loss = 5.62978100103 , RMSE train = 1.18231933756
iter = 20 , loss = 2.61820113008 , RMSE train = 1.00601013825
iter = 30 , loss = 1.32429630221 , RMSE train = 0.996672160644
iter = 40 , loss = 0.734890958031 , RMSE train = 0.99621264651
iter = 50 , loss = 0.464793412146 , RMSE train = 0.996184081495
iter = 60 , loss = 0.340943058213 , RMSE train = 0.996181347407
iter = 70 , loss = 0.284148579208 , RMSE train = 0.996180972472
iter = 80 , loss = 0.258103818785 , RMSE train = 0.996180914097
iter = 90 , loss = 0.246160195903 , RMSE train = 0.996180905172
iter = 100 , loss = 0.240683073898 , RMSE train = 0.996180903957

Item-based MF, RMSE = 1.04980475198
</code></pre></div></div>

<p>K·∫øt qu·∫£ c√≥ t·ªët h∆°n m·ªôt ch√∫t.</p>

<p>Ch√∫ng ta c√πng l√†m th√™m m·ªôt th√≠ nghi·ªám n·ªØa khi kh√¥ng s·ª≠ d·ª•ng regularization, t·ª©c <code class="language-plaintext highlighter-rouge">lam = 0</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rs</span> <span class="o">=</span> <span class="n">MF</span><span class="p">(</span><span class="n">rate_train</span><span class="p">,</span> <span class="n">K</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">lam</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">print_every</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">learning_rate</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">max_iter</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">user_based</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">rs</span><span class="p">.</span><span class="n">fit</span><span class="p">()</span>
<span class="c1"># evaluate on test data
</span><span class="n">RMSE</span> <span class="o">=</span> <span class="n">rs</span><span class="p">.</span><span class="n">evaluate_RMSE</span><span class="p">(</span><span class="n">rate_test</span><span class="p">)</span>
<span class="k">print</span> <span class="s">'</span><span class="se">\n</span><span class="s">Item-based MF, RMSE ='</span><span class="p">,</span> <span class="n">RMSE</span>
</code></pre></div></div>

<p>N·∫øu c√°c b·∫°n ch·∫°y ƒëo·∫°n code tr√™n, c√°c b·∫°n s·∫Ω th·∫•y ch·∫•t l∆∞·ª£ng c·ªßa m√¥ h√¨nh gi·∫£m ƒëi r√µ r·ªát (RMSE cao).</p>

<p><a name="-ap-dung-len-movielens-m"></a></p>

<h3 id="33-√°p-d·ª•ng-l√™n-movielens-1m">3.3. √Åp d·ª•ng l√™n MovieLens 1M</h3>

<p>Ti·∫øp theo, ch√∫ng ta c√πng ƒë·∫øn v·ªõi m·ªôt b·ªô c∆° s·ªü d·ªØ li·ªáu l·ªõn h∆°n l√† <a href="https://grouplens.org/datasets/movielens/1m/">MovieLens 1M</a> bao g·ªìm x·∫•p x·ªâ 1 tri·ªáu <em>ratings</em> c·ªßa 6000 ng∆∞·ªùi d√πng l√™n 4000 b·ªô phim. ƒê√¢y l√† m·ªôt b·ªô c∆° s·ªü d·ªØ li·ªáu l·ªõn, th·ªùi gian <em>training</em> c≈©ng s·∫Ω tƒÉng theo. B·∫°n ƒë·ªçc c≈©ng c√≥ th·ªÉ th·ª≠ √°p d·ª•ng m√¥ h√¨nh Neighborhood-based Collaborative Filtering l√™n c∆° s·ªü d·ªØ li·ªáu n√†y ƒë·ªÉ so s√°nh k·∫øt qu·∫£. T√¥i d·ª± ƒëo√°n l√† th·ªùi gian <em>training</em> s·∫Ω nhanh nh∆∞ng th·ªùi gian <em>inference</em> s·∫Ω r·∫•t l√¢u.</p>

<p><strong>Load d·ªØ li·ªáu:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">r_cols</span> <span class="o">=</span> <span class="p">[</span><span class="s">'user_id'</span><span class="p">,</span> <span class="s">'movie_id'</span><span class="p">,</span> <span class="s">'rating'</span><span class="p">,</span> <span class="s">'unix_timestamp'</span><span class="p">]</span>

<span class="n">ratings_base</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'ml-1m/ratings.dat'</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">'::'</span><span class="p">,</span> <span class="n">names</span><span class="o">=</span><span class="n">r_cols</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'latin-1'</span><span class="p">)</span>
<span class="n">ratings</span> <span class="o">=</span> <span class="n">ratings_base</span><span class="p">.</span><span class="n">as_matrix</span><span class="p">()</span>

<span class="c1"># indices in Python start from 0
</span><span class="n">ratings</span><span class="p">[:,</span> <span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
</code></pre></div></div>

<p><strong>T√°ch t·∫≠p training v√† test, s·ª≠ d·ª•ng 1/3 d·ªØ li·ªáu cho test</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>

<span class="n">rate_train</span><span class="p">,</span> <span class="n">rate_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">ratings</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.33</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
<span class="k">print</span> <span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">X_test</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(670140, 4) (330069, 4)
</code></pre></div></div>

<p><strong>√Åp d·ª•ng Matrix Factorization:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rs</span> <span class="o">=</span> <span class="n">MF</span><span class="p">(</span><span class="n">rate_train</span><span class="p">,</span> <span class="n">K</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">lam</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">,</span> <span class="n">print_every</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">learning_rate</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">max_iter</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">user_based</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">rs</span><span class="p">.</span><span class="n">fit</span><span class="p">()</span>
<span class="c1"># evaluate on test data
</span><span class="n">RMSE</span> <span class="o">=</span> <span class="n">rs</span><span class="p">.</span><span class="n">evaluate_RMSE</span><span class="p">(</span><span class="n">rate_test</span><span class="p">)</span>
<span class="k">print</span> <span class="s">'</span><span class="se">\n</span><span class="s">Item-based MF, RMSE ='</span><span class="p">,</span> <span class="n">RMSE</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iter = 2 , loss = 6.80832412832 , RMSE train = 1.12359545594
iter = 4 , loss = 4.35238943299 , RMSE train = 1.00312745587
iter = 6 , loss = 2.85065420416 , RMSE train = 0.978490200028
iter = 8 , loss = 1.90134941041 , RMSE train = 0.974189487594
iter = 10 , loss = 1.29580344305 , RMSE train = 0.973438724579

Item-based MF, RMSE = 0.981631017423
</code></pre></div></div>

<p>K·∫øt qu·∫£ kh√° ·∫•n t∆∞·ª£ng sau 10 v√≤ng l·∫∑p. K·∫øt qu·∫£ khi √°p d·ª•ng Neighborhood-based Collaborative Filtering l√† kho·∫£ng 0.92 nh∆∞ng th·ªùi gian <em>inference</em> kh√° l·ªõn.</p>

<p><a name="-thao-luan"></a></p>

<h2 id="4-th·∫£o-lu·∫≠n">4. Th·∫£o lu·∫≠n</h2>

<p><a name="-khi-co-bias"></a></p>

<h3 id="41-khi-c√≥-bias">4.1. Khi c√≥ bias</h3>
<p>M·ªôt l·ª£i th·∫ø c·ªßa h∆∞·ªõng ti·∫øp c·∫≠n Matrix Factorization cho Collaborative Filtering l√† kh·∫£ nƒÉng linh ho·∫°t c·ªßa n√≥ khi c√≥ th√™m c√°c ƒëi·ªÅu ki·ªán r√†ng bu·ªôc kh√°c, c√°c ƒëi·ªÅu ki·ªán n√†y c√≥ th·ªÉ li√™n quan ƒë·∫øn qu√° tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu ho·∫∑c ƒë·∫øn t·ª´ng ·ª©ng d·ª•ng c·ª• th·ªÉ.</p>

<p>Gi·∫£ s·ª≠ ta ch∆∞a chu·∫©n ho√° c√°c gi√° tr·ªã <em>ratings</em> m√† s·ª≠ d·ª•ng tr·ª±c ti·∫øp gi√° tr·ªã ban ƒë·∫ßu c·ªßa ch√∫ng trong ƒë·∫≥ng th·ª©c \((1)\). Vi·ªác chu·∫©n ho√° c≈©ng c√≥ th·ªÉ ƒë∆∞·ª£c t√≠ch h·ª£p tr·ª±c ti·∫øp v√†o trong h√†m m·∫•t m√°t. Nh∆∞ t√¥i ƒë√£ ƒë·ªÅ c·∫≠p, c√°c <em>ratings</em> th·ª±c t·∫ø ƒë·ªÅu c√≥ nh·ªØng thi√™n l·ªách v·ªÅ <em>users</em> ho·∫∑c/v√† <em>items</em>. C√≥ <em>user</em> d·ªÖ v√† kh√≥ t√≠nh, c≈©ng c√≥ nh·ªØng <em>item</em> ƒë∆∞·ª£c <em>rated</em> cao h∆°n nh·ªØng <em>items</em> kh√°c ch·ªâ v√¨ <em>user</em> th·∫•y c√°c <em>users</em> kh√°c ƒë√£ ƒë√°nh gi√° <em>item</em> ƒë√≥ cao r·ªìi. V·∫•n ƒë·ªÅ thi√™n l·ªách c√≥ th·ªÉ ƒë∆∞·ª£c gi·∫£i quy·∫øt b·∫±ng c√°c bi·∫øn g·ªçi l√† <em>biases</em>, ph·ª• thu·ªôc v√†o m·ªói <em>user</em> v√† <em>item</em> v√† c√≥ th·ªÉ ƒë∆∞·ª£c t·ªëi ∆∞u c√πng v·ªõi \(\mathbf{X}\) v√† \(\mathbf{W}\). Khi ƒë√≥, <em>ratings</em> c·ªßa <em>user</em> \(n\) l√™n <em>item</em> \(m\) kh√¥ng ch·ªâ ƒë∆∞·ª£c x·∫•p x·ªâ b·∫±ng \(\mathbf{x}_m\mathbf{w}_n\) m√† c√≤n ph·ª• thu·ªôc v√†o c√°c <em>biases</em> c·ªßa <em>item</em> \(m\) v√† <em>user</em> \(n\) n·ªØa. Ngo√†i ra, gi√° tr·ªã n√†y c≈©ng c√≥ th·ªÉ ph·ª• thu·ªôc v√†o gi√° tr·ªã trung b√¨nh c·ªßa to√†n b·ªô <em>ratings</em> n·ªØa:</p>

<p>\[
y_{mn} \approx \mathbf{x}_m \mathbf{w}_n + b_m + d_n + \mu
\]</p>

<p>v·ªõi \(b_m, d_n, \mu\) l·∫ßn l∆∞·ª£t l√† bias c·ªßa <em>item</em> \(m\), <em>user</em> \(n\), v√† gi√° tr·ªã trung b√¨nh c·ªßa to√†n b·ªô c√°c <em>ratings</em> (l√† h·∫±ng s·ªë).</p>

<p>L√∫c n√†y, h√†m m·∫•t m√°t c√≥ th·ªÉ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh: 
\[
\begin{eqnarray}
\mathcal{L}(\mathbf{X}, \mathbf{W}, \mathbf{b}, \mathbf{d}) &amp;=&amp; \frac{1}{2s} \sum_{n=1}^N \sum_{m:r_{mn} = 1} (\mathbf{x}_m\mathbf{w}_n + b_m + d_n +\mu - y_{mn})^2 + \newline 
&amp;&amp; + \frac{\lambda}{2} (||\mathbf{X}||_F^2 + ||\mathbf{W}||_F^2 + ||\mathbf{b}||_2^2  + ||\mathbf{d}||_2^2)
\end{eqnarray}
\]</p>

<p>Vi·ªác t√≠nh to√°n ƒë·∫°o h√†m cho t·ª´ng bi·∫øn kh√¥ng qu√° ph·ª©c t·∫°p, t√¥i s·∫Ω kh√¥ng b√†n ti·∫øp ·ªü ƒë√¢y. Tuy nhi√™n, n·∫øu b·∫°n quan t√¢m, b·∫°n c√≥ th·ªÉ tham kh·∫£o <a href="https://github.com/tiepvupsu/tiepvupsu.github.io/tree/master/assets/25_mf/python">source code m√† t√¥i vi·∫øt t·∫°i ƒë√¢y</a>. Link n√†y c≈©ng k√®m theo c√°c v√≠ d·ª• n√™u trong M·ª•c 3 v√† d·ªØ li·ªáu li√™n quan.</p>

<p><a name="-nonnegative-matrix-factorization"></a></p>

<h3 id="42-nonnegative-matrix-factorization">4.2. Nonnegative Matrix Factorization</h3>
<p>Khi d·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c chu·∫©n ho√°, ch√∫ng ƒë·ªÅu mang c√°c gi√° tr·ªã kh√¥ng √¢m. N·∫øu d·∫£i gi√° tr·ªã c·ªßa <em>ratings</em> c√≥ ch·ª©a gi√° tr·ªã √¢m, ta ch·ªâ c·∫ßn c·ªông th√™m v√†o Utility Matrix m·ªôt gi√° tr·ªã h·ª£p l√Ω ƒë·ªÉ c√≥ ƒë∆∞·ª£c c√°c <em>ratings</em> l√† c√°c s·ªë kh√¥ng √¢m. Khi ƒë√≥, m·ªôt ph∆∞∆°ng ph√°p Matrix Factorization kh√°c c≈©ng ƒë∆∞·ª£c s·ª≠ d·ª•ng r·∫•t nhi·ªÅu v√† mang l·∫°i hi·ªáu qu·∫£ cao trong Recommendation Systems l√† Nonnegative Matrix Factorization, t·ª©c ph√¢n t√≠ch ma tr·∫≠n th√†nh t√≠ch c√°c ma tr·∫≠n c√≥ c√°c ph·∫ßn t·ª≠ kh√¥ng √¢m.</p>

<p>B·∫±ng Matrix Factorization, c√°c <em>users</em> v√† <em>items</em> ƒë∆∞·ª£c li√™n k·∫øt v·ªõi nhau b·ªüi c√°c <em>latent features</em> (t√≠nh ch·∫•t ·∫©n). ƒê·ªô li√™n k·∫øt c·ªßa m·ªói <em>user</em> v√† <em>item</em> t·ªõi m·ªói latent feature ƒë∆∞·ª£c ƒëo b·∫±ng th√†nh ph·∫ßn t∆∞∆°ng ·ª©ng trong feature vector h·ªá s·ªë c·ªßa ch√∫ng, gi√° tr·ªã c√†ng l·ªõn th·ªÉ hi·ªán vi·ªác <em>user</em> ho·∫∑c <em>item</em> c√≥ li√™n quan ƒë·∫øn latent feature ƒë√≥ c√†ng l·ªõn. B·∫±ng tr·ª±c gi√°c, s·ª± li√™n quan c·ªßa m·ªôt <em>user</em> ho·∫∑c <em>item</em> ƒë·∫øn m·ªôt latent feature n√™n l√† m·ªôt s·ªë kh√¥ng √¢m v·ªõi gi√° tr·ªã 0 th·ªÉ hi·ªán vi·ªác <em>kh√¥ng li√™n quan</em>. H∆°n n·ªØa, m·ªói <em>user</em> v√† <em>item</em> ch·ªâ <em>li√™n quan</em> ƒë·∫øn m·ªôt v√†i <em>latent feature</em> nh·∫•t ƒë·ªãnh. V·∫≠y n√™n feature vectors cho <em>users</em> v√† <em>items</em> n√™n l√† c√°c vectors kh√¥ng √¢m v√† c√≥ r·∫•t nhi·ªÅu gi√° tr·ªã b·∫±ng 0. Nh·ªØng nghi·ªám n√†y c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c b·∫±ng c√°ch cho th√™m r√†ng bu·ªôc kh√¥ng √¢m v√†o c√°c th√†nh ph·∫ßn c·ªßa \(\mathbf{X}\) v√† \(\mathbf{W}\).</p>

<p>B·∫°n ƒë·ªçc mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ Nonnegative Matrix Factorization c√≥ th·ªÉ tham kh·∫£o c√°c t√†i li·ªáu ·ªü M·ª•c 6.</p>

<p><a name="-incremental-matrix-factorization"></a></p>

<h3 id="43-incremental-matrix-factorization">4.3. Incremental Matrix Factorization</h3>
<p>Nh∆∞ ƒë√£ ƒë·ªÅ c·∫≠p, th·ªùi gian <em>inference</em> c·ªßa Recommendation Systems s·ª≠ d·ª•ng Matrix Factorization l√† r·∫•t nhanh nh∆∞ng th·ªùi gian <em>training</em> l√† kh√° l√¢u v·ªõi c√°c t·∫≠p d·ªØ li·ªáu l·ªõn. Th·ª±c t·∫ø cho th·∫•y, Utility Matrix thay ƒë·ªïi li√™n t·ª•c v√¨ c√≥ th√™m <em>users</em>, <em>items</em> c≈©ng nh∆∞ c√°c <em>ratings</em> m·ªõi ho·∫∑c <em>user</em> mu·ªën thay ƒë·ªïi <em>ratings</em> c·ªßa h·ªç, v√¨ v·∫≠y hai ma tr·∫≠n \(\mathbf{X}\) v√† \(\mathbf{W}\) ph·∫£i th∆∞·ªùng xuy√™n ƒë∆∞·ª£c c·∫≠p nh·∫≠t. ƒêi·ªÅu n√†y ƒë·ªìng nghƒ©a v·ªõi vi·ªác ta ph·∫£i ti·∫øp t·ª•c th·ª±c hi·ªán qu√° tr√¨nh <em>training</em> v·ªën t·ªën kh√° nhi·ªÅu th·ªùi gian.</p>

<p>Vi·ªác n√†y ƒë∆∞·ª£c gi·∫£i quy·∫øt ph·∫ßn n√†o b·∫±ng Incremental Matrix Factorization. B·∫°n ƒë·ªçc quan t√¢m c√≥ th·ªÉ ƒë·ªçc <a href="https://ai2-s2-pdfs.s3.amazonaws.com/c827/d2267640a7a913250fa5046a16ff078a5ce4.pdf">Fast incremental matrix factorization for recommendation with positive-only feedback</a>.</p>

<p><a name="-others"></a></p>

<h3 id="44-others">4.4. Others</h3>

<ul>
  <li>
    <p>B√†i to√°n Matrix Factorization c√≥ nhi·ªÅu h∆∞·ªõng gi·∫£i quy·∫øt kh√°c ngo√†i Gradient Descent. B·∫°n ƒë·ªçc c√≥ th·ªÉ xem th√™m <a href="https://stanford.edu/~rezab/classes/cme323/S15/notes/lec14.pdf">Alternating Least Square (ALS)</a>, <a href="https://stanford.edu/~rezab/classes/cme323/S15/notes/lec14.pdf">Generalized Low Rank Models</a>. Trong b√†i ti·∫øp theo, t√¥i s·∫Ω vi·∫øt v·ªÅ <a href="https://en.wikipedia.org/wiki/Singular_value_decomposition">Singular Value Decomposition (SVD)</a>, m·ªôt ph∆∞∆°ng ph√°p ph·ªï bi·∫øn trong Matrix Factorization,  ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng nh·ªØng trong (Recommendation) Systems m√† c√≤n trong nhi·ªÅu h·ªá th·ªëng kh√°c. M·ªùi c√°c b·∫°n ƒë√≥n ƒë·ªçc.</p>
  </li>
  <li>
    <p><a href="https://github.com/tiepvupsu/tiepvupsu.github.io/tree/master/assets/25_mf/python">Source code</a>
<a name="-tai-lieu-tham-khao"></a></p>
  </li>
</ul>

<h2 id="6-t√†i-li·ªáu-tham-kh·∫£o">6. T√†i li·ªáu tham kh·∫£o</h2>

<p>[1] <a href="http://infolab.stanford.edu/~ullman/mmds/ch9.pdf">Recommendation Systems - Stanford InfoLab</a></p>

<p>[2] <a href="https://www.youtube.com/watch?v=h9gpufJFF-0&amp;t=436s">Collaborative Filtering - Stanford University</a></p>

<p>[3] <a href="https://www.youtube.com/watch?v=saXRzxgFN0o&amp;list=PL_npY1DYXHPT-3dorG7Em6d18P4JRFDvH">Recommendation systems - Machine Learning - Andrew Ng</a></p>

<p>[4] Ekstrand, Michael D., John T. Riedl, and Joseph A. Konstan. ‚Äú<a href="http://herbrete.vvv.enseirb-matmeca.fr/IR/CF_Recsys_Survey.pdf">Collaborative filtering recommender systems.</a>‚Äù Foundations and Trends¬Æ in Human‚ÄìComputer Interaction 4.2 (2011): 81-173.</p>

<p>[5] <a href="https://datajobs.com/data-science-repo/Recommender-Systems-%5BNetflix%5D.pdf">Matrix factorization techniques for recommender systems</a></p>

<p>[6] <a href="http://joyceho.github.io/cs584_s16/slides/mf-16.pdf">Matrix Factorization For Recommender Systems</a></p>

<p>[7] <a href="http://www.siam.org/meetings/sdm06/proceedings/059zhangs2.pdf">Learning from Incomplete Ratings Using Non-negative Matrix Factorization</a></p>

<p>[8] <a href="https://ai2-s2-pdfs.s3.amazonaws.com/c827/d2267640a7a913250fa5046a16ff078a5ce4.pdf">Fast Incremental Matrix Factorization for Recommendation with Positive-Only Feedback</a></p>
:ET